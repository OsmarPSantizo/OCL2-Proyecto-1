/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,20],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,29],$Vb=[1,27],$Vc=[1,28],$Vd=[1,30],$Ve=[1,32],$Vf=[1,31],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[2,5,17,19,20,25,35,36,37,38,39,49,52,53,54,55,57,61,63,64,67,68,70],$Vk=[1,57],$Vl=[1,72],$Vm=[1,71],$Vn=[1,70],$Vo=[1,54],$Vp=[1,53],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,55],$Vx=[1,56],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[1,63],$VE=[1,65],$VF=[1,66],$VG=[1,67],$VH=[1,68],$VI=[1,69],$VJ=[1,80],$VK=[25,40],$VL=[2,30],$VM=[2,31],$VN=[25,40,47],$VO=[2,34],$VP=[1,112],$VQ=[1,96],$VR=[1,97],$VS=[1,98],$VT=[1,99],$VU=[1,100],$VV=[1,101],$VW=[1,102],$VX=[1,103],$VY=[1,104],$VZ=[1,105],$V_=[1,106],$V$=[1,107],$V01=[1,108],$V11=[1,109],$V21=[1,110],$V31=[1,111],$V41=[18,41,43,44,47,62,72,73,74,75,76,81,82,83,84,85,86,87,88,89,90,99],$V51=[1,135],$V61=[1,136],$V71=[1,137],$V81=[1,151],$V91=[18,34,43],$Va1=[2,48],$Vb1=[18,41,43,44,47,62,88,89,90,99],$Vc1=[1,213],$Vd1=[41,43,47],$Ve1=[18,41,43,44,47,62,72,73,82,83,84,85,86,87,88,89,90,99],$Vf1=[18,41,43,44,47,62,72,73,74,75,82,83,84,85,86,87,88,89,90,99],$Vg1=[18,41,43,44,47,62,72,73,74,75,76,82,83,84,85,86,87,88,89,90,99],$Vh1=[18,41,43,44,47,62,82,83,84,85,86,87,88,89,90,99],$Vi1=[1,268],$Vj1=[43,47],$Vk1=[1,317],$Vl1=[1,316],$Vm1=[35,36,37,38,39,52],$Vn1=[52,61,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"impresion":8,"struct":9,"asignacion":10,"decl_vectores":11,"decl_struct":12,"push_vector":13,"pop_vector":14,"sent_if":15,"sent_while":16,"BREAK":17,"PYC":18,"CONTINUE":19,"RETURN":20,"e":21,"sent_switch":22,"sent_for":23,"sent_do_while":24,"ID":25,"DECRE":26,"INCRE":27,"modi_vector":28,"modi_struct":29,"funciones":30,"llamada":31,"tipo":32,"lista_ids":33,"IGUAL":34,"DOUBLE":35,"INT":36,"STRINGT":37,"CHAR":38,"BOOLEAN":39,"CORA":40,"CORC":41,"lista_valores":42,"COMA":43,"PNT":44,"PUSH":45,"PARA":46,"PARC":47,"POP":48,"STRUCTC":49,"LLAVA":50,"lista_atributos":51,"LLAVC":52,"PRINTLN":53,"PRINT":54,"IF":55,"ELSE":56,"SWITCH":57,"list_case":58,"default":59,"caso":60,"CASE":61,"DOSPUNTOS":62,"WHILE":63,"FOR":64,"dec_asignacion_for":65,"actualizacion_for":66,"DEFAULT":67,"DO":68,"lista_parametros":69,"VOID":70,"MAIN":71,"MAS":72,"MENOS":73,"MULTI":74,"DIV":75,"POT":76,"SQRT":77,"SIN":78,"COS":79,"TAN":80,"MOD":81,"MAYORIGUAL":82,"MAYORQUE":83,"MENORIGUAL":84,"MENORQUE":85,"IGUALIGUAL":86,"DIFERENTE":87,"AND":88,"ANDD":89,"OR":90,"NOT":91,"DECIMAL":92,"ENTERO":93,"CADENA":94,"NULLL":95,"CARACTER":96,"TRUE":97,"FALSE":98,"INTERROGACION":99,"CARALENGHT":100,"GETVALUE":101,"TOUPPER":102,"TOLOWER":103,"SUBSTR":104,"CARAOFPOS":105,"TOINT":106,"TODOUBLE":107,"ROUND":108,"TYPEOF":109,"STRING":110,"PARSE":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"BREAK",18:"PYC",19:"CONTINUE",20:"RETURN",25:"ID",26:"DECRE",27:"INCRE",34:"IGUAL",35:"DOUBLE",36:"INT",37:"STRINGT",38:"CHAR",39:"BOOLEAN",40:"CORA",41:"CORC",43:"COMA",44:"PNT",45:"PUSH",46:"PARA",47:"PARC",48:"POP",49:"STRUCTC",50:"LLAVA",52:"LLAVC",53:"PRINTLN",54:"PRINT",55:"IF",56:"ELSE",57:"SWITCH",61:"CASE",62:"DOSPUNTOS",63:"WHILE",64:"FOR",67:"DEFAULT",68:"DO",70:"VOID",71:"MAIN",72:"MAS",73:"MENOS",74:"MULTI",75:"DIV",76:"POT",77:"SQRT",78:"SIN",79:"COS",80:"TAN",81:"MOD",82:"MAYORIGUAL",83:"MAYORQUE",84:"MENORIGUAL",85:"MENORQUE",86:"IGUALIGUAL",87:"DIFERENTE",88:"AND",89:"ANDD",90:"OR",91:"NOT",92:"DECIMAL",93:"ENTERO",94:"CADENA",95:"NULLL",96:"CARACTER",97:"TRUE",98:"FALSE",99:"INTERROGACION",100:"CARALENGHT",101:"GETVALUE",102:"TOUPPER",103:"TOLOWER",104:"SUBSTR",105:"CARAOFPOS",106:"TOINT",107:"TODOUBLE",108:"ROUND",109:"TYPEOF",110:"STRING",111:"PARSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,1],[6,1],[6,2],[6,3],[6,3],[6,1],[6,1],[6,1],[6,2],[6,1],[7,5],[7,3],[32,1],[32,1],[32,1],[32,1],[32,1],[11,9],[11,7],[42,3],[42,1],[28,7],[13,7],[14,6],[9,5],[12,8],[51,4],[51,3],[29,6],[33,3],[33,1],[8,5],[8,5],[10,4],[15,7],[15,11],[15,9],[22,7],[22,8],[22,7],[58,2],[58,1],[60,4],[16,7],[23,11],[65,4],[65,3],[59,3],[66,2],[66,2],[66,3],[24,8],[30,8],[30,7],[30,8],[30,7],[30,7],[69,4],[69,2],[31,4],[31,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,6],[21,4],[21,4],[21,4],[21,4],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,2],[21,3],[21,1],[21,1],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,5],[21,5],[21,5],[21,2],[21,2],[21,4],[21,6],[21,4],[21,6],[21,1],[21,5],[21,5],[21,8],[21,6],[21,4],[21,4],[21,4],[21,4],[21,4],[21,6],[21,6],[21,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Ast($$[$0-1]); return this.$
break;
case 2: case 58:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 38: case 48: case 59:
this.$ = new Array(); this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 18: case 19: case 23: case 24: case 25:
 this.$ = $$[$0]; 
break;
case 14:
 this.$ = new Break(); 
break;
case 15:
 this.$ = new Continue(); 
break;
case 16:
 this.$ = new Retorno(null); 
break;
case 17:
 this.$ = new Retorno($$[$0-1]); 
break;
case 20:
this.$ = $$[$0-1]; 
break;
case 21:
 this.$ = new Asignacion($$[$0-2], new Aritmetica(new Identificador($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 22:
 this.$ = new Asignacion($$[$0-2], new Aritmetica(new Identificador($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 26:
 this.$ = $$[$0-1]; 
break;
case 27:
console.log("Error Sintactico "  + yytext
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);

                           new Errores("Sintactico", "No se esperaba el caracter "+
                                           this._$.first_line, this._$.first_column);
                           
break;
case 28:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column); 
break;
case 29:
this.$ = new Declaracion($$[$0-2],$$[$0-1],null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 30:
this.$ = new Tipo("DOBLE");
break;
case 31:
this.$ = new Tipo("ENTERO");
break;
case 32:
this.$ = new Tipo("CADENA");
break;
case 33:
this.$ = new Tipo("CARACTER");
break;
case 34:
this.$ = new Tipo("BOOLEAN");
break;
case 35:
this.$ = new DeclaracionVectores($$[$0-8],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 37: case 47:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 39:
 this.$ = new AccesoVector( $$[$0-6], $$[$0-4], $$[$0-1], true ,_$[$0-6].first_line,_$[$0-6].last_column ); 
break;
case 40:
this.$ = new PushArreglo($$[$0-6], $$[$0-2], _$[$0-6].first_line,_$[$0-6].last_column);
break;
case 41:
this.$ = new PopArreglo($$[$0-5], _$[$0-5].first_line,_$[$0-5].last_column);
break;
case 42:
 this.$ = new DefinicionStruct($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].last_column) 
break;
case 43:
 this.$ = new DeclaracionStruct( $$[$0-7], $$[$0-6], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].last_column );  
break;
case 44:
this.$ = $$[$0-3]; this.$.push(new Simbolo(7, $$[$0-2], $$[$0-1], null));
break;
case 45:
this.$ = new Array(); this.$.push(new Simbolo(7, $$[$0-2], $$[$0-1], null));
break;
case 46:
 this.$ = new ModificarStruct($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].last_column ); 
break;
case 49:
this.$ = new Println($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 50:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 51:
this.$ = new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 52:
this.$ = new Ifs($$[$0-4],$$[$0-1],[],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 53:
this.$ = new Ifs($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 54:
this.$ = new Ifs($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 55:
this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 56:
this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 57:
this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 60:
this.$ = new Caso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 61:
this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 62:
this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 63:
this.$ = new Declaracion($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 64:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 65:
this.$ = new Caso(null,$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 66: case 115:
this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 67: case 114:
this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 68:
this.$ = new Asignacion($$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 69:
this.$ = new DoWhile($$[$0-1],$$[$0-5],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 70:
this.$ = new Funcion(2, $$[$0-7], $$[$0-6], $$[$0-4], false, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 71:
this.$ = new Funcion(2, $$[$0-6], $$[$0-5], [], false, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 72:
this.$ = new Funcion(3, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 73:
this.$ = new Funcion(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 74:
this.$ = new Fmain(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 75:
this.$ = $$[$0-3]; this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 76:
this.$ = new Array(); this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 77:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column);
break;
case 78:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 79:
this.$ = new Aritmetica($$[$0-2], '+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 80:
this.$ = new Aritmetica($$[$0-2], '-', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 81:
this.$ = new Aritmetica($$[$0-2], '*', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 82:
this.$ = new Aritmetica($$[$0-2], '/', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 83:
this.$ = new Aritmetica($$[$0-2], '^', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 84:
this.$ = new Aritmetica($$[$0-3], '^', $$[$0-1], _$[$0-5].first_line,_$[$0-5].last_column, false);
break;
case 85:
this.$ = new Aritmetica($$[$0-1], 'sqrt', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 86:
this.$ = new Aritmetica($$[$0-1], 'sin', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 87:
this.$ = new Aritmetica($$[$0-1], 'cos', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 88:
this.$ = new Aritmetica($$[$0-1], 'tan', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 89:
this.$ = new Aritmetica($$[$0-2], '%', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 90:
this.$ = new Relacional($$[$0-2], '>=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 91:
this.$ = new Relacional($$[$0-2], '>', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 92:
this.$ = new Relacional($$[$0-2], '<=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 93:
this.$ = new Relacional($$[$0-2], '<', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 94:
this.$ = new Relacional($$[$0-2], '==', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 95:
this.$ = new Relacional($$[$0-2], '!=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 96:
this.$ = new Logicas($$[$0-2],'&&', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 97:
this.$ = new Aritmetica($$[$0-2],'+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 98:
this.$ = new Logicas($$[$0-2],'||', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 99:
this.$ = new Logicas($$[$0],'!', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 100:
this.$ = new Aritmetica($$[$0], 'UNARIO', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 101:
this.$ = $$[$0-1];
break;
case 102:
this.$ = new Primitivo(Number($$[$0]),'DOBLE',_$[$0].first_line,_$[$0].last_column);
break;
case 103:
this.$ = new Primitivo(Number($$[$0]),'ENTERO',_$[$0].first_line,_$[$0].last_column);
break;
case 104:
 this.$ = new AccesoStruct($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 105:
this.$ = new Identificador($$[$0],_$[$0].first_line,_$[$0].last_column);
break;
case 106:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CADENA',_$[$0].first_line,_$[$0].last_column);
break;
case 107:
this.$ = new Primitivo(null,'NULL',_$[$0].first_line,_$[$0].last_column);
break;
case 108:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CARACTER',_$[$0].first_line,_$[$0].last_column);
break;
case 109:
this.$ = new Primitivo(true,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 110:
this.$ = new Primitivo(false,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 111:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 112:
this.$ = new LenghtC($$[$0-4], _$[$0-4].first_line,_$[$0-4].last_column);
break;
case 113:
this.$ = new PopArreglo($$[$0-4], _$[$0-4].first_line,_$[$0-4].last_column);
break;
case 116:
this.$ = new Casteos($$[$0-2],$$[$0], _$[$0-3].first_line,_$[$0-3].last_column);
break;
case 117:
 this.$ = new SliceVector( $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line,_$[$0-5].last_column ); 
break;
case 118:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], $$[$0-1], false ,_$[$0-3].first_line,_$[$0-3].last_column); 
break;
case 121:
this.$ = new Toupper($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 122:
this.$ = new Tolower($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 123:
this.$ = new  SubString($$[$0-7],$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 124:
this.$ = new  CharOfPosition($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 125:
this.$ = new ToInt($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 126:
this.$ = new ToDouble($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 127:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 128:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 129:
this.$ = new Tostring($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 130:
this.$ = new TipoParse($$[$0-1],"booleano",_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 131:
this.$ = new TipoParse($$[$0-1],"int",_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 132:
this.$ = new TipoParse($$[$0-1],"doble",_$[$0-5].first_line,_$[$0-5].last_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),{18:[1,43]},{18:[1,44]},{18:[1,45],21:46,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($Vj,[2,18]),o($Vj,[2,19]),{18:[1,73]},{25:[1,77],26:[1,74],27:[1,75],34:[1,76],40:[1,79],44:[1,78],46:$VJ},o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),{18:[1,81]},o($Vj,[2,27]),{25:[1,84],33:82,40:[1,83]},{46:[1,85]},{46:[1,86]},{25:[1,87]},{46:[1,88]},{46:[1,89]},{46:[1,90]},{46:[1,91]},{50:[1,92]},{25:[1,93],71:[1,94]},o($VK,$VL),o($VK,$VM),o($VN,[2,32]),o($VN,[2,33]),o($VK,$VO),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),{18:[1,95],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{46:[1,113]},{46:[1,114]},{46:[1,115]},{46:[1,116]},{46:[1,117]},{21:118,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:119,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:120,25:$Vk,31:64,32:121,35:[1,124],36:[1,123],37:$V7,38:$V8,39:[1,122],46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($V41,[2,102]),o($V41,[2,103]),o([18,41,43,47,62,72,73,74,75,76,81,82,83,84,85,86,87,88,89,90,99],[2,105],{26:[1,127],27:[1,126],40:[1,128],44:[1,125],46:$VJ}),o($V41,[2,106]),o($V41,[2,107]),o($V41,[2,108]),o($V41,[2,109]),o($V41,[2,110]),{46:[1,129]},o($V41,[2,120]),{46:[1,130]},{46:[1,131]},{46:[1,132]},{46:[1,133]},{46:[1,134]},{44:$V51},{44:$V61},{44:$V71},o($Vj,[2,20]),{18:[1,138]},{18:[1,139]},{21:140,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{34:[1,141]},{25:[1,144],45:[1,142],48:[1,143]},{21:145,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:148,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,42:146,46:$Vo,47:[1,147],73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($Vj,[2,26]),{18:[1,150],34:[1,149],43:$V81},{41:[1,152]},o($V91,$Va1,{46:[1,153]}),{21:154,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:155,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{50:[1,156]},{21:157,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:158,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:159,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{25:[1,162],32:161,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,65:160},{2:$V0,4:163,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{46:[1,164]},{46:[1,165]},o($Vj,[2,17]),{21:166,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:167,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:168,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:169,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:170,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:171,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:172,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:173,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:174,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:175,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:176,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:177,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:178,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:179,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:180,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:181,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{102:[1,182],103:[1,183],104:[1,184],105:[1,185]},{21:186,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:187,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:188,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:189,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:190,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($Vb1,[2,99],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$}),o($V41,[2,100]),{44:$VP,47:[1,191],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{47:[1,192]},{44:$V51,47:$VO},{44:$V61,47:$VM},{44:$V71,47:$VL},{25:[1,193],48:[1,195],100:[1,194]},o($V41,[2,114]),o($V41,[2,115]),{21:196,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:197,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:198,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:199,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:200,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:201,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:202,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{111:[1,203]},{111:[1,204]},{111:[1,205]},o($Vj,[2,21]),o($Vj,[2,22]),{18:[1,206],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{25:[1,207]},{46:[1,208]},{46:[1,209]},{34:[1,210]},{41:[1,211],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{43:$Vc1,47:[1,212]},o($V41,[2,78]),o($Vd1,[2,38],{44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31}),{21:214,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($Vj,[2,29]),{25:[1,215]},{25:[1,217],33:216},{32:220,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,47:[1,219],69:218},{44:$VP,47:[1,221],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,222],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{32:224,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,51:223},{44:$VP,47:[1,225],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,226],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,227],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{18:[1,228]},{25:[1,229]},{34:[1,230]},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,231],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{32:220,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,47:[1,233],69:232},{47:[1,234]},o($Ve1,[2,79],{74:$VS,75:$VT,76:$VU,81:$VV}),o($Ve1,[2,80],{74:$VS,75:$VT,76:$VU,81:$VV}),o($Vf1,[2,81],{76:$VU,81:$VV}),o($Vf1,[2,82],{76:$VU,81:$VV}),o($Vg1,[2,83],{81:$VV}),o($Vg1,[2,89],{81:$VV}),o($Vh1,[2,90],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV}),o($Vh1,[2,91],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV}),o($Vh1,[2,92],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV}),o($Vh1,[2,93],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV}),o($Vh1,[2,94],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV}),o($Vh1,[2,95],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV}),o($Vb1,[2,96],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$}),o($Vb1,[2,97],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$}),o([18,41,43,44,47,62,90,99],[2,98],{72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11}),{44:$VP,62:[1,235],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{46:[1,236]},{46:[1,237]},{46:[1,238]},{46:[1,239]},{43:[1,240],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,241],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,242],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,243],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,244],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},o($V41,[2,101]),{21:245,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($V41,[2,104]),{46:[1,246]},{46:[1,247]},{41:[1,249],44:$VP,62:[1,248],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{43:[1,250],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,251],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,252],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,253],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,254],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,255],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{46:[1,256]},{46:[1,257]},{46:[1,258]},o($Vj,[2,51]),{46:[1,259]},{21:260,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{47:[1,261]},{21:262,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{34:[1,263]},o($V41,[2,77]),{21:264,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{18:[1,265],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},o($V91,[2,47]),{34:[1,266],43:$V81},o([34,43],$Va1),{43:$Vi1,47:[1,267]},{50:[1,269]},{25:[1,270]},{18:[1,271]},{18:[1,272]},{32:274,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,52:[1,273]},{25:[1,275]},{50:[1,276]},{50:[1,277]},{50:[1,278]},{21:279,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{34:[1,280]},{21:281,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{63:[1,282]},{43:$Vi1,47:[1,283]},{50:[1,284]},{50:[1,285]},{21:286,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{47:[1,287]},{47:[1,288]},{21:289,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:290,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:291,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($V41,[2,85]),o($V41,[2,86]),o($V41,[2,87]),o($V41,[2,88]),o([18,41,43,47,62,99],[2,116],{44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21}),{47:[1,292]},{47:[1,293]},{21:294,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($V41,[2,118]),{21:295,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($V41,[2,125]),o($V41,[2,126]),o($V41,[2,127]),o($V41,[2,128]),o($V41,[2,129]),{21:296,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:297,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:298,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{21:148,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,42:299,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{44:$VP,47:[1,300],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{18:[1,301]},{18:[1,302],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{21:303,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($Vd1,[2,37],{44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31}),o($Vj,[2,28]),{21:305,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,40:[1,304],46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{50:[1,306]},{32:307,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9},{2:$V0,4:308,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},o($Vj1,[2,76]),o($Vj,[2,49]),o($Vj,[2,50]),o($Vj,[2,42]),{25:[1,309]},{18:[1,310]},{2:$V0,4:311,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{2:$V0,4:312,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{58:313,59:314,60:315,61:$Vk1,67:$Vl1},{18:[1,318],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{21:319,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{18:[2,64],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{46:[1,320]},{50:[1,321]},{2:$V0,4:322,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{2:$V0,4:323,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},o([18,41,43,47,62],[2,111],{44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31}),o($V41,[2,121]),o($V41,[2,122]),{43:[1,324],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,325],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,326],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},o($V41,[2,112]),o($V41,[2,113]),{41:[1,327],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,328],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,329],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,330],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{44:$VP,47:[1,331],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{43:$Vc1,47:[1,332]},{18:[1,333]},o($Vj,[2,41]),o($Vj,[2,46]),{18:[1,334],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{21:148,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,42:335,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{18:[1,336],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{2:$V0,4:337,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{25:[1,338]},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,339],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{18:[1,340]},o($Vm1,[2,45]),{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,341],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,342],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{52:[1,343],59:344,60:345,61:$Vk1,67:$Vl1},{52:[1,346]},o($Vn1,[2,59]),{62:[1,347]},{21:348,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{25:[1,350],66:349},{18:[2,63],44:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{21:351,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{2:$V0,4:352,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,353],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,354],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{21:355,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},o($V41,[2,124]),o($V41,[2,84]),o($V41,[2,117]),o($V41,[2,119]),o($V41,[2,130]),o($V41,[2,131]),o($V41,[2,132]),{18:[1,356]},o($Vj,[2,40]),o($Vj,[2,39]),{41:[1,357],43:$Vc1},o($Vj,[2,36]),{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,358],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},o($Vj1,[2,75]),o($Vj,[2,71]),o($Vm1,[2,44]),o($Vj,[2,52],{56:[1,359]}),o($Vj,[2,61]),o($Vj,[2,55]),{52:[1,360]},o($Vn1,[2,58]),o($Vj,[2,57]),{2:$V0,4:361,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{44:$VP,62:[1,362],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{47:[1,363]},{26:[1,364],27:[1,365],34:[1,366]},{44:$VP,47:[1,367],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,368],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},o($Vj,[2,73]),o($Vj,[2,74]),{44:$VP,47:[1,369],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},o($Vj,[2,43]),{18:[1,370]},o($Vj,[2,70]),{15:372,50:[1,371],55:$Vd},o($Vj,[2,56]),{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[2,65],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{2:$V0,4:373,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{50:[1,374]},{47:[2,66]},{47:[2,67]},{21:375,25:$Vk,31:64,35:$Vl,36:$Vm,39:$Vn,46:$Vo,73:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,101:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:$VI},{18:[2,69]},o($Vj,[2,72]),o($V41,[2,123]),o($Vj,[2,35]),{2:$V0,4:376,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},o($Vj,[2,54]),o($Vn1,[2,60],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,22:17,23:18,24:19,28:21,29:22,30:23,31:24,32:26,6:42,2:$V0,17:$V1,19:$V2,20:$V3,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi}),{2:$V0,4:377,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{44:$VP,47:[2,68],72:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21,99:$V31},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,378],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:$V4,28:21,29:22,30:23,31:24,32:26,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,52:[1,379],53:$Vb,54:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,68:$Vh,70:$Vi},o($Vj,[2,53]),o($Vj,[2,62])],
defaultActions: {41:[2,1],364:[2,66],365:[2,67],367:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};



        const {Aritmetica} = require('../Expresiones/Operaciones/Aritmetica');
        const {Primitivo} = require('../Expresiones/Primitivo');
        const {Relacional} = require('../Expresiones/Operaciones/Relacionales')
        const {Logicas} = require('../Expresiones/Operaciones/Logicas')
        const {Println} = require('../Instrucciones/Println');
        const {Print} = require('../Instrucciones/Print');
        const {Tolower} = require('../Instrucciones/Tolower');
        const {Toupper} = require('../Instrucciones/Toupper');
        const {ToInt} = require('../Instrucciones/FuncionesNativas/ToInt');
        const {ToDouble} = require('../Instrucciones/FuncionesNativas/ToDouble');
        const {Round} = require('../Instrucciones/FuncionesNativas/Round');
        const {Typeof} = require('../Instrucciones/FuncionesNativas/Typeof');
        const {Tostring} = require('../Instrucciones/FuncionesNativas/Tostring');
        const {SubString} = require('../Instrucciones/SubString')
        const {TipoParse} = require('../Instrucciones/FuncionesNativas/TipoParse')
        const {CharOfPosition} = require('../Instrucciones/CharOfPosition')
        const {LenghtC} = require('../Instrucciones/LenghtC')
        const {Casteos} = require('../Instrucciones/FuncionesNativas/Casteos');
        const {Declaracion} = require('../Instrucciones/Declaracion');

        // Vectores
        const {DeclaracionVectores} = require('../Instrucciones/DeclaracionVectores');
        const {SliceVector} = require('../Instrucciones/Vector/SliceVector');
        const {PushArreglo} = require('../Instrucciones/Vector/PushArreglo');
        const {PopArreglo} = require('../Instrucciones/Vector/PopArreglo');
        const {AccesoVector} = require('../Expresiones/AccesoVector');

        // Structs
        const { DefinicionStruct } = require('../Instrucciones/Struct/DefinicionStruct');
        const { DeclaracionStruct } = require('../Instrucciones/Struct/DeclaracionStruct')
        const { ModificarStruct } = require('../Instrucciones/Struct/ModificarStruct')
        const { AccesoStruct } = require('../Expresiones/AccesoStruct')

        const {Asignacion} = require('../Instrucciones/Asignacion');
        const {Ifs} = require('../Instrucciones/SentenciasdeControl/Ifs');
        const {While }= require('../Instrucciones/SentenciasCiclicas/While');
        const {DoWhile}= require('../Instrucciones/SentenciasCiclicas/DoWhile');
        const {Ast} = require('../AST/Ast');
        const {Errores} = require('../AST/Errores');
        const {Tipo} = require('../TablaSimbolos/Tipo');
        const {Simbolo} = require('../TablaSimbolos/Simbolo');
        const {Identificador} = require('../Expresiones/identificador');
        const {Ternario} = require('../Expresiones/Ternario');
        const {Break} = require('../Instrucciones/SentenciadeTransferencia/Break');
        const {Retorno} = require('../Instrucciones/SentenciadeTransferencia/Return');
        const {Continue} = require('../Instrucciones/SentenciadeTransferencia/Continue');
        const {Switch} = require('../Instrucciones/SentenciasdeControl/Switch');
        const {Caso} = require('../Instrucciones/SentenciasdeControl/caso');
        const {For} = require('../Instrucciones/SentenciasCiclicas/For');
        const {Funcion} = require('../Instrucciones/Funcion');
        const {Llamada} = require('../Instrucciones/Llamada');
        const {Fmain} = require('../Instrucciones/Fmain');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoramos los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lineas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 26 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 46 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 47 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 50 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 52 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 18 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 99 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 'EVALUAR'
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 97
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 98
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 36
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 110
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 37
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 38
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 39
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 70
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 95
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 53
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 54
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 103
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 102
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 106
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 107
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 108
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 109
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 'TOSTRING'
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 104
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 105
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 100
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 111
break;
case 62:console.log("Reconocio: "+yy_.yytext); return 45
break;
case 63:console.log("Reconocio: "+yy_.yytext); return 48
break;
case 64:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 65:console.log("Reconocio: "+yy_.yytext); return 56
break;
case 66:console.log("Reconocio: "+yy_.yytext); return 63
break;
case 67:console.log("Reconocio: "+yy_.yytext); return 17
break;
case 68:console.log("Reconocio: "+yy_.yytext); return 57
break;
case 69:console.log("Reconocio: "+yy_.yytext); return 61
break;
case 70:console.log("Reconocio: "+yy_.yytext); return 68
break;
case 71:console.log("Reconocio: "+yy_.yytext); return 67
break;
case 72:console.log("Reconocio: "+yy_.yytext); return 64
break;
case 73:console.log("Reconocio: "+yy_.yytext); return 'DYNAMICLIST'
break;
case 74:console.log("Reconocio: "+yy_.yytext); return 'NEW'
break;
case 75:console.log("Reconocio: "+yy_.yytext); return 'APPEND'
break;
case 76:console.log("Reconocio: "+yy_.yytext); return 'SETVALUE'
break;
case 77:console.log("Reconocio: "+yy_.yytext); return 101
break;
case 78:console.log("Reconocio: "+yy_.yytext); return 19
break;
case 79:console.log("Reconocio: "+yy_.yytext); return 20
break;
case 80:console.log("Reconocio: "+yy_.yytext); return 49
break;
case 81:console.log("Reconocio: "+yy_.yytext); return 71
break;
case 82:console.log("Reconocio: "+yy_.yytext); return 92
break;
case 83:console.log("Reconocio: "+yy_.yytext); return 93
break;
case 84:console.log("Reconocio: "+yy_.yytext); return 25
break;
case 85:console.log("Reconocio: "+yy_.yytext); return 94
break;
case 86:console.log("Reconocio: "+yy_.yytext); return 96
break;
case 87:/*Espacios se ignoran */ 
break;
case 88:return 5
break;
case 89:console.log("Error Lexico " + yy_.yytext
                        + "linea "+ yy_.yylineno
                        + "columna " +(yy_.yylloc.last_column+1));

                        new Errores('Lexico','El caracter '+ yy_.yytext
                                + ' no forma parte del lenguaje',
                                yy_.yylineno+1,
                                yy_.yylloc.last_column+1);
                        
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:=)/,/^(?:\?)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:pow\b)/,/^(?:!)/,/^(?:%)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:evaluar\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:string\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:dynamiclist\b)/,/^(?:new\b)/,/^(?:append\b)/,/^(?:setvalue\b)/,/^(?:getvalue\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:struct\b)/,/^(?:main\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:([0-9]+))/,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/,/^(?:(("((\\([\'\"\\nrt]))|([^\"\\]))*")))/,/^(?:(('((\\([\'\"\\nrt]))|([^\'\\]))')))/,/^(?:[\s\r\n\t])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}