/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,16],$V5=[1,32],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,27],$Ve=[1,26],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[2,5,13,15,16,21,31,32,33,34,35,40,43,44,46,48,52,54,55,58,59,61,62],$Vk=[1,53],$Vl=[1,69],$Vm=[1,68],$Vn=[1,67],$Vo=[1,50],$Vp=[1,49],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,51],$Vx=[1,52],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,62],$VF=[1,63],$VG=[1,64],$VH=[1,65],$VI=[1,66],$VJ=[1,75],$VK=[21,36],$VL=[2,26],$VM=[2,27],$VN=[21,36,42],$VO=[2,30],$VP=[1,91],$VQ=[1,92],$VR=[1,93],$VS=[1,94],$VT=[1,95],$VU=[1,96],$VV=[1,97],$VW=[1,98],$VX=[1,99],$VY=[1,100],$VZ=[1,101],$V_=[1,102],$V$=[1,103],$V01=[1,104],$V11=[1,105],$V21=[1,106],$V31=[1,107],$V41=[14,37,39,42,53,64,65,66,67,68,73,74,75,76,77,78,79,80,81,82,91,93],$V51=[1,129],$V61=[1,130],$V71=[1,131],$V81=[1,141],$V91=[14,30,39],$Va1=[2,37],$Vb1=[14,37,39,42,53,80,81,82,91,93],$Vc1=[1,197],$Vd1=[37,39,42],$Ve1=[14,37,39,42,53,64,65,74,75,76,77,78,79,80,81,82,91,93],$Vf1=[14,37,39,42,53,64,65,66,67,74,75,76,77,78,79,80,81,82,91,93],$Vg1=[14,37,39,42,53,64,65,66,67,68,74,75,76,77,78,79,80,81,82,91,93],$Vh1=[14,37,39,42,53,74,75,76,77,78,79,80,81,82,91,93],$Vi1=[1,244],$Vj1=[39,42],$Vk1=[1,282],$Vl1=[1,281],$Vm1=[46,52,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"impresion":8,"asignacion":9,"decl_vectores":10,"sent_if":11,"sent_while":12,"BREAK":13,"PYC":14,"CONTINUE":15,"RETURN":16,"e":17,"sent_switch":18,"sent_for":19,"sent_do_while":20,"ID":21,"DECRE":22,"INCRE":23,"modi_vector":24,"funciones":25,"llamada":26,"startwith":27,"tipo":28,"lista_ids":29,"IGUAL":30,"DOUBLE":31,"INT":32,"STRING":33,"CHAR":34,"BOOLEAN":35,"CORA":36,"CORC":37,"lista_valores":38,"COMA":39,"PRINTLN":40,"PARA":41,"PARC":42,"PRINT":43,"IF":44,"LLAVA":45,"LLAVC":46,"ELSE":47,"SWITCH":48,"list_case":49,"default":50,"caso":51,"CASE":52,"DOSPUNTOS":53,"WHILE":54,"FOR":55,"dec_asignacion_for":56,"actualizacion_for":57,"DEFAULT":58,"DO":59,"lista_parametros":60,"VOID":61,"START":62,"WITH":63,"MAS":64,"MENOS":65,"MULTI":66,"DIV":67,"POT":68,"SQRT":69,"SIN":70,"COS":71,"TAN":72,"MOD":73,"MAYORIGUAL":74,"MAYORQUE":75,"MENORIGUAL":76,"MENORQUE":77,"IGUALIGUAL":78,"DIFERENTE":79,"AND":80,"ANDD":81,"OR":82,"NOT":83,"DECIMAL":84,"ENTERO":85,"CADENA":86,"NULLL":87,"CARACTER":88,"TRUE":89,"FALSE":90,"INTERROGACION":91,"GETVALUE":92,"PNT":93,"TOUPPER":94,"TOLOWER":95,"SUBSTR":96,"CARAOFPOS":97,"CARALENGHT":98,"TOINT":99,"TODOUBLE":100,"ROUND":101,"TYPEOF":102,"STRINGT":103,"PARSE":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"BREAK",14:"PYC",15:"CONTINUE",16:"RETURN",21:"ID",22:"DECRE",23:"INCRE",30:"IGUAL",31:"DOUBLE",32:"INT",33:"STRING",34:"CHAR",35:"BOOLEAN",36:"CORA",37:"CORC",39:"COMA",40:"PRINTLN",41:"PARA",42:"PARC",43:"PRINT",44:"IF",45:"LLAVA",46:"LLAVC",47:"ELSE",48:"SWITCH",52:"CASE",53:"DOSPUNTOS",54:"WHILE",55:"FOR",58:"DEFAULT",59:"DO",61:"VOID",62:"START",63:"WITH",64:"MAS",65:"MENOS",66:"MULTI",67:"DIV",68:"POT",69:"SQRT",70:"SIN",71:"COS",72:"TAN",73:"MOD",74:"MAYORIGUAL",75:"MAYORQUE",76:"MENORIGUAL",77:"MENORQUE",78:"IGUALIGUAL",79:"DIFERENTE",80:"AND",81:"ANDD",82:"OR",83:"NOT",84:"DECIMAL",85:"ENTERO",86:"CADENA",87:"NULLL",88:"CARACTER",89:"TRUE",90:"FALSE",91:"INTERROGACION",92:"GETVALUE",93:"PNT",94:"TOUPPER",95:"TOLOWER",96:"SUBSTR",97:"CARAOFPOS",98:"CARALENGHT",99:"TOINT",100:"TODOUBLE",101:"ROUND",102:"TYPEOF",103:"STRINGT",104:"PARSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,1],[6,1],[6,2],[6,3],[6,3],[6,1],[6,1],[6,2],[6,2],[6,1],[7,5],[7,3],[28,1],[28,1],[28,1],[28,1],[28,1],[10,9],[10,7],[38,3],[38,1],[24,7],[29,3],[29,1],[8,5],[8,5],[9,4],[11,7],[11,11],[11,9],[18,7],[18,8],[18,7],[49,2],[49,1],[51,4],[12,7],[19,11],[56,4],[56,3],[50,3],[57,2],[57,2],[57,3],[20,8],[25,8],[25,7],[25,8],[25,7],[60,4],[60,2],[26,4],[26,3],[27,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,6],[17,4],[17,4],[17,4],[17,4],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,5],[17,2],[17,2],[17,4],[17,6],[17,4],[17,6],[17,1],[17,1],[17,5],[17,5],[17,8],[17,6],[17,5],[17,4],[17,4],[17,4],[17,4],[17,4],[17,6],[17,6],[17,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Ast($$[$0-1]); return this.$
break;
case 2: case 47:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 34: case 37: case 48:
this.$ = new Array(); this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 8: case 9: case 14: case 15: case 19:
 this.$ = $$[$0]; 
break;
case 7: case 20:
 this.$ = $$[$0];
break;
case 10:
 this.$ = new Break(); 
break;
case 11:
 this.$ = new Continue(); 
break;
case 12:
 this.$ = new Retorno(null); 
break;
case 13:
 this.$ = new Retorno($$[$0-1]); 
break;
case 16:
this.$ = $$[$0-1]; 
break;
case 17:
 this.$ = new Asignacion($$[$0-2], new Aritmetica(new Identificador($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 18:
 this.$ = new Asignacion($$[$0-2], new Aritmetica(new Identificador($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 21: case 22:
 this.$ = $$[$0-1];
break;
case 23:
console.log("Error Sintactico "  + yytext
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);

                           new Errores("Sintactico", "No se esperaba el caracter "+
                                           this._$.first_line, this._$.first_column);
                           
break;
case 24:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column); 
break;
case 25:
this.$ = new Declaracion($$[$0-2],$$[$0-1],null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 26:
this.$ = new Tipo("DOBLE");
break;
case 27:
this.$ = new Tipo("ENTERO");
break;
case 28:
this.$ = new Tipo("CADENA");
break;
case 29:
this.$ = new Tipo("CARACTER");
break;
case 30:
this.$ = new Tipo("BOOLEAN");
break;
case 31:
this.$ = new DeclaracionVectores($$[$0-8],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 33: case 36:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 35:
 this.$ = new AccesoVector( $$[$0-6], $$[$0-4], $$[$0-1], true ,_$[$0-6].first_line,_$[$0-6].last_column ); 
break;
case 38:
this.$ = new Println($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 39:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 40:
this.$ = new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 41:
this.$ = new Ifs($$[$0-4],$$[$0-1],[],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 42:
this.$ = new Ifs($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 43:
this.$ = new Ifs($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 44:
this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 45:
this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 46:
this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 49:
this.$ = new Caso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 50:
this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 51:
this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 52:
this.$ = new Declaracion($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 53:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 54:
this.$ = new Caso(null,$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 55: case 101:
this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 56: case 100:
this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 57:
this.$ = new Asignacion($$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 58:
this.$ = new DoWhile($$[$0-1],$$[$0-5],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 59:
this.$ = new Funcion(2, $$[$0-7], $$[$0-6], $$[$0-4], false, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 60:
this.$ = new Funcion(2, $$[$0-6], $$[$0-5], [], false, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 61:
this.$ = new Funcion(3, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 62:
this.$ = new Funcion(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 63:
this.$ = $$[$0-3]; this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 64:
this.$ = new Array(); this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 65:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column);
break;
case 66:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 67:
this.$ = new StartWith($$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 68:
this.$ = new Aritmetica($$[$0-2], '+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 69:
this.$ = new Aritmetica($$[$0-2], '-', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 70:
this.$ = new Aritmetica($$[$0-2], '*', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 71:
this.$ = new Aritmetica($$[$0-2], '/', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 72:
this.$ = new Aritmetica($$[$0-2], '^', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 73:
this.$ = new Aritmetica($$[$0-3], '^', $$[$0-1], _$[$0-5].first_line,_$[$0-5].last_column, false);
break;
case 74:
this.$ = new Aritmetica($$[$0-1], 'sqrt', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 75:
this.$ = new Aritmetica($$[$0-1], 'sin', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 76:
this.$ = new Aritmetica($$[$0-1], 'cos', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 77:
this.$ = new Aritmetica($$[$0-1], 'tan', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 78:
this.$ = new Aritmetica($$[$0-2], '%', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 79:
this.$ = new Relacional($$[$0-2], '>=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 80:
this.$ = new Relacional($$[$0-2], '>', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 81:
this.$ = new Relacional($$[$0-2], '<=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 82:
this.$ = new Relacional($$[$0-2], '<', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 83:
this.$ = new Relacional($$[$0-2], '==', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 84:
this.$ = new Relacional($$[$0-2], '!=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 85:
this.$ = new Logicas($$[$0-2],'&&', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 86:
this.$ = new Aritmetica($$[$0-2],'+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 87:
this.$ = new Logicas($$[$0-2],'||', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 88:
this.$ = new Logicas($$[$0],'!', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 89:
this.$ = new Aritmetica($$[$0], 'UNARIO', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 90:
this.$ = $$[$0-1];
break;
case 91:
this.$ = new Primitivo(Number($$[$0]),'DOBLE',_$[$0].first_line,_$[$0].last_column);
break;
case 92:
this.$ = new Primitivo(Number($$[$0]),'ENTERO',_$[$0].first_line,_$[$0].last_column);
break;
case 93:
this.$ = new Identificador($$[$0],_$[$0].first_line,_$[$0].last_column);
break;
case 94:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CADENA',_$[$0].first_line,_$[$0].last_column);
break;
case 95:
this.$ = new Primitivo(null,'NULL',_$[$0].first_line,_$[$0].last_column);
break;
case 96:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CARACTER',_$[$0].first_line,_$[$0].last_column);
break;
case 97:
this.$ = new Primitivo(true,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 98:
this.$ = new Primitivo(false,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 99:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 102:
this.$ = new Casteos($$[$0-2],$$[$0], _$[$0-3].first_line,_$[$0-3].last_column);
break;
case 103:
 this.$ = new SliceVector( $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line,_$[$0-5].last_column ); 
break;
case 104:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], $$[$0-1], false ,_$[$0-3].first_line,_$[$0-3].last_column); 
break;
case 108:
this.$ = new Toupper($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 109:
this.$ = new Tolower($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 110:
this.$ = new  SubString($$[$0-7],$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 111:
this.$ = new  CharOfPosition($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 112:
this.$ = new LenghtC($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 113:
this.$ = new ToInt($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 114:
this.$ = new ToDouble($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 115:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 116:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 117:
this.$ = new Tostring($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 118:
this.$ = new TipoParse($$[$0-1],"booleano",_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 119:
this.$ = new TipoParse($$[$0-1],"int",_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 120:
this.$ = new TipoParse($$[$0-1],"doble",_$[$0-5].first_line,_$[$0-5].last_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{1:[3]},{2:$V0,5:[1,37],6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),{14:[1,39]},{14:[1,40]},{14:[1,41],17:42,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($Vj,[2,14]),o($Vj,[2,15]),{14:[1,70]},{22:[1,71],23:[1,72],30:[1,73],36:[1,74],41:$VJ},o($Vj,[2,19]),o($Vj,[2,20]),{14:[1,76]},{14:[1,77]},o($Vj,[2,23]),{21:[1,80],29:78,36:[1,79]},{41:[1,81]},{41:[1,82]},{41:[1,83]},{41:[1,84]},{41:[1,85]},{41:[1,86]},{45:[1,87]},{21:[1,88]},{63:[1,89]},o($VK,$VL),o($VK,$VM),o($VN,[2,28]),o($VN,[2,29]),o($VK,$VO),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{14:[1,90],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{41:[1,108]},{41:[1,109]},{41:[1,110]},{41:[1,111]},{41:[1,112]},{17:113,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:114,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:115,21:$Vk,26:60,27:61,28:116,31:[1,119],32:[1,118],33:$V7,34:$V8,35:[1,117],41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($V41,[2,91]),o($V41,[2,92]),o($V41,[2,93],{22:[1,121],23:[1,120],36:[1,122],41:$VJ}),o($V41,[2,94]),o($V41,[2,95]),o($V41,[2,96]),o($V41,[2,97]),o($V41,[2,98]),{41:[1,123]},o($V41,[2,106]),o($V41,[2,107]),{41:[1,124]},{41:[1,125]},{41:[1,126]},{41:[1,127]},{41:[1,128]},{93:$V51},{93:$V61},{93:$V71},o($Vj,[2,16]),{14:[1,132]},{14:[1,133]},{17:134,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:135,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:138,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,38:136,41:$Vo,42:[1,137],62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($Vj,[2,21]),o($Vj,[2,22]),{14:[1,140],30:[1,139],39:$V81},{37:[1,142]},o($V91,$Va1,{41:[1,143]}),{17:144,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:145,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:146,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:147,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:148,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{21:[1,151],28:150,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,56:149},{2:$V0,4:152,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{41:[1,153]},{21:[1,155],26:154},o($Vj,[2,13]),{17:156,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:157,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:158,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:159,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:160,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:161,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:162,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:163,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:164,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:165,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:166,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:167,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:168,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:169,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:170,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:171,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{94:[1,172],95:[1,173],96:[1,174],97:[1,175],98:[1,176]},{17:177,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:178,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:179,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:180,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:181,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($Vb1,[2,88],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_}),o($V41,[2,89]),{42:[1,182],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,183]},{42:$VO,93:$V51},{42:$VM,93:$V61},{42:$VL,93:$V71},o($V41,[2,100]),o($V41,[2,101]),{17:184,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:185,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:186,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:187,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:188,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:189,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:190,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{104:[1,191]},{104:[1,192]},{104:[1,193]},o($Vj,[2,17]),o($Vj,[2,18]),{14:[1,194],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{37:[1,195],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{39:$Vc1,42:[1,196]},o($V41,[2,66]),o($Vd1,[2,34],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31}),{17:198,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($Vj,[2,25]),{21:[1,199]},{21:[1,201],29:200},{28:204,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,42:[1,203],60:202},{42:[1,205],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,206],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,207],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,208],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,209],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{14:[1,210]},{21:[1,211]},{30:[1,212]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,213],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{28:204,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,42:[1,215],60:214},o($V41,[2,67]),{41:$VJ},o($Ve1,[2,68],{66:$VR,67:$VS,68:$VT,73:$VU}),o($Ve1,[2,69],{66:$VR,67:$VS,68:$VT,73:$VU}),o($Vf1,[2,70],{68:$VT,73:$VU}),o($Vf1,[2,71],{68:$VT,73:$VU}),o($Vg1,[2,72],{73:$VU}),o($Vg1,[2,78],{73:$VU}),o($Vh1,[2,79],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU}),o($Vh1,[2,80],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU}),o($Vh1,[2,81],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU}),o($Vh1,[2,82],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU}),o($Vh1,[2,83],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU}),o($Vh1,[2,84],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU}),o($Vb1,[2,85],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_}),o($Vb1,[2,86],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_}),o([14,37,39,42,53,82,91,93],[2,87],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01}),{53:[1,216],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{41:[1,217]},{41:[1,218]},{41:[1,219]},{41:[1,220]},{41:[1,221]},{39:[1,222],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,223],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,224],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,225],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,226],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},o($V41,[2,90]),{17:227,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{37:[1,229],53:[1,228],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{39:[1,230],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,231],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,232],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,233],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,234],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,235],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{41:[1,236]},{41:[1,237]},{41:[1,238]},o($Vj,[2,40]),{30:[1,239]},o($V41,[2,65]),{17:240,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{14:[1,241],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},o($V91,[2,36]),{30:[1,242],39:$V81},o([30,39],$Va1),{39:$Vi1,42:[1,243]},{45:[1,245]},{21:[1,246]},{14:[1,247]},{14:[1,248]},{45:[1,249]},{45:[1,250]},{45:[1,251]},{17:252,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{30:[1,253]},{17:254,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{54:[1,255]},{39:$Vi1,42:[1,256]},{45:[1,257]},{17:258,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{42:[1,259]},{42:[1,260]},{17:261,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:262,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{42:[1,263]},{17:264,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($V41,[2,74]),o($V41,[2,75]),o($V41,[2,76]),o($V41,[2,77]),o([14,37,39,42,53,91],[2,102],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,93:$V31}),{17:265,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($V41,[2,104]),{17:266,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($V41,[2,113]),o($V41,[2,114]),o($V41,[2,115]),o($V41,[2,116]),o($V41,[2,117]),{17:267,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:268,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:269,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{17:270,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($Vd1,[2,33],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31}),o($Vj,[2,24]),{17:272,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,36:[1,271],41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{45:[1,273]},{28:274,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9},{2:$V0,4:275,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},o($Vj1,[2,64]),o($Vj,[2,38]),o($Vj,[2,39]),{2:$V0,4:276,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{2:$V0,4:277,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{49:278,50:279,51:280,52:$Vk1,58:$Vl1},{14:[1,283],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{17:284,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{14:[2,53],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{41:[1,285]},{45:[1,286]},{2:$V0,4:287,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},o([14,37,39,42,53],[2,99],{64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31}),o($V41,[2,108]),o($V41,[2,109]),{39:[1,288],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,289],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},o($V41,[2,112]),{42:[1,290],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{37:[1,291],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,292],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,293],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,294],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,295],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{14:[1,296],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{17:138,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,38:297,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{14:[1,298],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{2:$V0,4:299,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{21:[1,300]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,301],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,302],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,303],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{46:[1,304],50:305,51:306,52:$Vk1,58:$Vl1},{46:[1,307]},o($Vm1,[2,48]),{53:[1,308]},{17:309,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{21:[1,311],57:310},{14:[2,52],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{17:312,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{2:$V0,4:313,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,314],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{17:315,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},o($V41,[2,111]),o($V41,[2,73]),o($V41,[2,103]),o($V41,[2,105]),o($V41,[2,118]),o($V41,[2,119]),o($V41,[2,120]),o($Vj,[2,35]),{37:[1,316],39:$Vc1},o($Vj,[2,32]),{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,317],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},o($Vj1,[2,63]),o($Vj,[2,60]),o($Vj,[2,41],{47:[1,318]}),o($Vj,[2,50]),o($Vj,[2,44]),{46:[1,319]},o($Vm1,[2,47]),o($Vj,[2,46]),{2:$V0,4:320,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{53:[1,321],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{42:[1,322]},{22:[1,323],23:[1,324],30:[1,325]},{42:[1,326],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,327],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},o($Vj,[2,62]),{42:[1,328],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{14:[1,329]},o($Vj,[2,59]),{11:331,44:$Vc,45:[1,330]},o($Vj,[2,45]),{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[2,54],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{2:$V0,4:332,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{45:[1,333]},{42:[2,55]},{42:[2,56]},{17:334,21:$Vk,26:60,27:61,31:$Vl,32:$Vm,35:$Vn,41:$Vo,62:$Vi,65:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI},{14:[2,58]},o($Vj,[2,61]),o($V41,[2,110]),o($Vj,[2,31]),{2:$V0,4:335,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},o($Vj,[2,43]),o($Vm1,[2,49],{7:4,8:5,9:6,10:7,11:8,12:9,18:13,19:14,20:15,24:17,25:18,26:19,27:20,28:22,6:38,2:$V0,13:$V1,15:$V2,16:$V3,21:$V4,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi}),{2:$V0,4:336,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{42:[2,57],64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,91:$V21,93:$V31},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,337],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:$V2,16:$V3,18:13,19:14,20:15,21:$V4,24:17,25:18,26:19,27:20,28:22,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,40:$Va,43:$Vb,44:$Vc,46:[1,338],48:$Vd,54:$Ve,55:$Vf,59:$Vg,61:$Vh,62:$Vi},o($Vj,[2,42]),o($Vj,[2,51])],
defaultActions: {37:[2,1],323:[2,55],324:[2,56],326:[2,58]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};



        const {Aritmetica} = require('../Expresiones/Operaciones/Aritmetica');
        const {Primitivo} = require('../Expresiones/Primitivo');
        const {Relacional} = require('../Expresiones/Operaciones/Relacionales')
        const {Logicas} = require('../Expresiones/Operaciones/Logicas')
        const {Println} = require('../Instrucciones/Println');
        const {Print} = require('../Instrucciones/Print');
        const {Tolower} = require('../Instrucciones/Tolower');
        const {Toupper} = require('../Instrucciones/Toupper');
        const {ToInt} = require('../Instrucciones/FuncionesNativas/ToInt');
        const {ToDouble} = require('../Instrucciones/FuncionesNativas/ToDouble');
        const {Round} = require('../Instrucciones/FuncionesNativas/Round');
        const {Typeof} = require('../Instrucciones/FuncionesNativas/Typeof');
        const {Tostring} = require('../Instrucciones/FuncionesNativas/Tostring');
        const {SubString} = require('../Instrucciones/SubString')
        const {TipoParse} = require('../Instrucciones/FuncionesNativas/TipoParse')
        const {CharOfPosition} = require('../Instrucciones/CharOfPosition')
        const {LenghtC} = require('../Instrucciones/LenghtC')
        const {Casteos} = require('../Instrucciones/FuncionesNativas/Casteos');
        const {Declaracion} = require('../Instrucciones/Declaracion');
        const {DeclaracionVectores} = require('../Instrucciones/DeclaracionVectores');
        const {SliceVector} = require('../Instrucciones/Vector/SliceVector');

        const {AccesoVector} = require('../Expresiones/AccesoVector');
        const {Asignacion} = require('../Instrucciones/Asignacion');
        const {Ifs} = require('../Instrucciones/SentenciasdeControl/Ifs');
        const {While }= require('../Instrucciones/SentenciasCiclicas/While');
        const {DoWhile}= require('../Instrucciones/SentenciasCiclicas/DoWhile');
        const {Ast} = require('../AST/Ast');
        const {Errores} = require('../AST/Errores');
        const {Tipo} = require('../TablaSimbolos/Tipo');
        const {Simbolo} = require('../TablaSimbolos/Simbolo');
        const {Identificador} = require('../Expresiones/identificador');
        const {Ternario} = require('../Expresiones/Ternario');
        const {Break} = require('../Instrucciones/SentenciadeTransferencia/Break');
        const {Retorno} = require('../Instrucciones/SentenciadeTransferencia/Return');
        const {Continue} = require('../Instrucciones/SentenciadeTransferencia/Continue');
        const {Switch} = require('../Instrucciones/SentenciasdeControl/Switch');
        const {Caso} = require('../Instrucciones/SentenciasdeControl/caso');
        const {For} = require('../Instrucciones/SentenciasCiclicas/For');
        const {Funcion} = require('../Instrucciones/Funcion');
        const {Llamada} = require('../Instrucciones/Llamada');
        const {StartWith} = require('../Instrucciones/StartWith');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoramos los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lineas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 23 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 22 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 36 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 45 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 46 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 14 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 53 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 64 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 65 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 66 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 67 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 68 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 68 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 69 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 'EVALUAR'
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 89
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 90
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 32
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 33
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 103
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 31
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 34
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 61
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 87
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 40
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 43
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 95
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 94
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 99
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 100
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 101
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 102
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 'TOSTRING'
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 96
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 97
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 98
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 104
break;
case 62:console.log("Reconocio: "+yy_.yytext); return 44
break;
case 63:console.log("Reconocio: "+yy_.yytext); return 47
break;
case 64:console.log("Reconocio: "+yy_.yytext); return 54
break;
case 65:console.log("Reconocio: "+yy_.yytext); return 13
break;
case 66:console.log("Reconocio: "+yy_.yytext); return 48
break;
case 67:console.log("Reconocio: "+yy_.yytext); return 52
break;
case 68:console.log("Reconocio: "+yy_.yytext); return 59
break;
case 69:console.log("Reconocio: "+yy_.yytext); return 58
break;
case 70:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 71:console.log("Reconocio: "+yy_.yytext); return 'DYNAMICLIST'
break;
case 72:console.log("Reconocio: "+yy_.yytext); return 'NEW'
break;
case 73:console.log("Reconocio: "+yy_.yytext); return 'APPEND'
break;
case 74:console.log("Reconocio: "+yy_.yytext); return 'SETVALUE'
break;
case 75:console.log("Reconocio: "+yy_.yytext); return 92
break;
case 76:console.log("Reconocio: "+yy_.yytext); return 15
break;
case 77:console.log("Reconocio: "+yy_.yytext); return 16
break;
case 78:console.log("Reconocio: "+yy_.yytext); return 'STRUCT'
break;
case 79:console.log("Reconocio: "+yy_.yytext); return 62
break;
case 80:console.log("Reconocio: "+yy_.yytext); return 63
break;
case 81:console.log("Reconocio: "+yy_.yytext); return 'MAIN'
break;
case 82:console.log("Reconocio: "+yy_.yytext); return 84
break;
case 83:console.log("Reconocio: "+yy_.yytext); return 85
break;
case 84:console.log("Reconocio: "+yy_.yytext); return 21
break;
case 85:console.log("Reconocio: "+yy_.yytext); return 86
break;
case 86:console.log("Reconocio: "+yy_.yytext); return 88
break;
case 87:/*Espacios se ignoran */ 
break;
case 88:return 5
break;
case 89:console.log("Error Lexico " + yy_.yytext
                        + "linea "+ yy_.yylineno
                        + "columna " +(yy_.yylloc.last_column+1));

                        new Errores('Lexico','El caracter '+ yy_.yytext
                                + ' no forma parte del lenguaje',
                                yy_.yylineno+1,
                                yy_.yylloc.last_column+1);
                        
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:=)/,/^(?:\?)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:pow\b)/,/^(?:!)/,/^(?:%)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:evaluar\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:string\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:dynamiclist\b)/,/^(?:new\b)/,/^(?:append\b)/,/^(?:setvalue\b)/,/^(?:getvalue\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:struct\b)/,/^(?:start\b)/,/^(?:with\b)/,/^(?:main\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:([0-9]+))/,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/,/^(?:(("((\\([\'\"\\nrt]))|([^\"\\]))*")))/,/^(?:(('((\\([\'\"\\nrt]))|([^\'\\]))')))/,/^(?:[\s\r\n\t])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}