/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,21],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,40],$V9=[1,41],$Va=[1,30],$Vb=[1,28],$Vc=[1,29],$Vd=[1,31],$Ve=[1,33],$Vf=[1,32],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[2,5,18,20,21,26,37,38,39,40,41,50,53,54,55,56,58,62,64,65,68,69,71],$Vk=[1,48],$Vl=[1,72],$Vm=[1,71],$Vn=[1,70],$Vo=[1,49],$Vp=[1,56],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,65],$VE=[1,66],$VF=[1,67],$VG=[1,68],$VH=[1,69],$VI=[1,80],$VJ=[26,42],$VK=[2,33],$VL=[2,34],$VM=[26,42,48],$VN=[2,37],$VO=[1,112],$VP=[1,96],$VQ=[1,97],$VR=[1,98],$VS=[1,99],$VT=[1,100],$VU=[1,101],$VV=[1,102],$VW=[1,103],$VX=[1,104],$VY=[1,105],$VZ=[1,106],$V_=[1,107],$V$=[1,108],$V01=[1,109],$V11=[1,110],$V21=[1,111],$V31=[19,34,43,45,48,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],$V41=[1,133],$V51=[1,134],$V61=[1,135],$V71=[1,150],$V81=[19,34,36],$V91=[2,30],$Va1=[19,34,43,45,48,63,85,86,87,88],$Vb1=[1,213],$Vc1=[34,43,48],$Vd1=[19,34,43,45,48,63,73,74,79,80,81,82,83,84,85,86,87,88],$Ve1=[19,34,43,45,48,63,73,74,75,76,79,80,81,82,83,84,85,86,87,88],$Vf1=[19,34,43,45,48,63,73,74,75,76,77,79,80,81,82,83,84,85,86,87,88],$Vg1=[19,34,43,45,48,63,79,80,81,82,83,84,85,86,87,88],$Vh1=[19,34,43,48,63,88],$Vi1=[1,270],$Vj1=[34,48],$Vk1=[1,318],$Vl1=[1,317],$Vm1=[37,38,39,40,41,53],$Vn1=[53,62,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"impresion":8,"struct":9,"asignacion_vector":10,"asignacion":11,"decl_vectores":12,"decl_struct":13,"push_vector":14,"pop_vector":15,"sent_if":16,"sent_while":17,"BREAK":18,"PYC":19,"CONTINUE":20,"RETURN":21,"e":22,"sent_switch":23,"sent_for":24,"sent_do_while":25,"ID":26,"DECRE":27,"INCRE":28,"modi_vector":29,"modi_struct":30,"funciones":31,"llamada":32,"lista_ids":33,"COMA":34,"tipo":35,"IGUAL":36,"DOUBLE":37,"INT":38,"STRINGT":39,"CHAR":40,"BOOLEAN":41,"CORA":42,"CORC":43,"lista_valores":44,"PNT":45,"PUSH":46,"PARA":47,"PARC":48,"POP":49,"STRUCTC":50,"LLAVA":51,"lista_atributos":52,"LLAVC":53,"PRINTLN":54,"PRINT":55,"IF":56,"ELSE":57,"SWITCH":58,"list_case":59,"default":60,"caso":61,"CASE":62,"DOSPUNTOS":63,"WHILE":64,"FOR":65,"dec_asignacion_for":66,"actualizacion_for":67,"DEFAULT":68,"DO":69,"lista_parametros":70,"VOID":71,"MAIN":72,"MAS":73,"MENOS":74,"MULTI":75,"DIV":76,"POT":77,"MOD":78,"MAYORIGUAL":79,"MAYORQUE":80,"MENORIGUAL":81,"MENORQUE":82,"IGUALIGUAL":83,"DIFERENTE":84,"AND":85,"ANDD":86,"OR":87,"INTERROGACION":88,"CARAOFPOS":89,"CARALENGHT":90,"SQRT":91,"SIN":92,"COS":93,"TAN":94,"NOT":95,"DECIMAL":96,"ENTERO":97,"CADENA":98,"NULLL":99,"CARACTER":100,"TRUE":101,"FALSE":102,"TOINT":103,"TODOUBLE":104,"ROUND":105,"TYPEOF":106,"STRING":107,"PARSE":108,"TOUPPER":109,"TOLOWER":110,"SUBSTR":111,"e2":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"BREAK",19:"PYC",20:"CONTINUE",21:"RETURN",26:"ID",27:"DECRE",28:"INCRE",34:"COMA",36:"IGUAL",37:"DOUBLE",38:"INT",39:"STRINGT",40:"CHAR",41:"BOOLEAN",42:"CORA",43:"CORC",45:"PNT",46:"PUSH",47:"PARA",48:"PARC",49:"POP",50:"STRUCTC",51:"LLAVA",53:"LLAVC",54:"PRINTLN",55:"PRINT",56:"IF",57:"ELSE",58:"SWITCH",62:"CASE",63:"DOSPUNTOS",64:"WHILE",65:"FOR",68:"DEFAULT",69:"DO",71:"VOID",72:"MAIN",73:"MAS",74:"MENOS",75:"MULTI",76:"DIV",77:"POT",78:"MOD",79:"MAYORIGUAL",80:"MAYORQUE",81:"MENORIGUAL",82:"MENORQUE",83:"IGUALIGUAL",84:"DIFERENTE",85:"AND",86:"ANDD",87:"OR",88:"INTERROGACION",89:"CARAOFPOS",90:"CARALENGHT",91:"SQRT",92:"SIN",93:"COS",94:"TAN",95:"NOT",96:"DECIMAL",97:"ENTERO",98:"CADENA",99:"NULLL",100:"CARACTER",101:"TRUE",102:"FALSE",103:"TOINT",104:"TODOUBLE",105:"ROUND",106:"TYPEOF",107:"STRING",108:"PARSE",109:"TOUPPER",110:"TOLOWER",111:"SUBSTR"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,1],[6,1],[6,2],[6,3],[6,3],[6,1],[6,1],[6,1],[6,2],[6,1],[33,3],[33,1],[7,5],[7,3],[35,1],[35,1],[35,1],[35,1],[35,1],[12,9],[12,8],[12,5],[44,3],[44,1],[29,7],[14,7],[15,6],[10,6],[10,5],[9,5],[13,8],[52,4],[52,3],[30,6],[8,5],[8,5],[11,4],[16,7],[16,11],[16,9],[23,7],[23,8],[23,7],[59,2],[59,1],[61,4],[17,7],[24,11],[66,4],[66,3],[60,3],[67,2],[67,2],[67,3],[25,8],[31,8],[31,7],[31,8],[31,7],[31,7],[70,4],[70,2],[32,4],[32,3],[22,3],[22,1],[22,2],[22,2],[22,4],[22,6],[22,4],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,5],[22,6],[22,3],[22,5],[22,5],[22,6],[22,4],[22,4],[22,4],[22,4],[22,2],[22,2],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,4],[22,4],[22,4],[22,4],[22,4],[22,6],[22,6],[22,6],[22,5],[22,5],[22,8],[112,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Ast($$[$0-1]); reporteGramaticalTDS.push('inicio.val := instrucciones.val EOF'); reporteGramaticalProducciones.push('<inicio> -> <instrucciones> EOF'); this.$.reporteGramaticalProducciones = reporteGramaticalProducciones; this.$.reporteGramaticalTDS = reporteGramaticalTDS; return this.$;
break;
case 2:
this.$ = $$[$0-1]; this.$.push($$[$0]); reporteGramaticalTDS.push('instrucciones.val := instrucciones.val instruccion.val'); reporteGramaticalProducciones.push('<instrucciones> -> <instrucciones> <instruccion>');
break;
case 3:
this.$ = new Array(); this.$.push($$[$0]); reporteGramaticalTDS.push('instrucciones.val := instruccion.val'); reporteGramaticalProducciones.push('<instrucciones> -> <instruccion>');
break;
case 4:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := declaracion.val'); reporteGramaticalProducciones.push('<instruccion> -> <declaracion>');
break;
case 5:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := impresion.val'); reporteGramaticalProducciones.push('<instruccion> -> <impresion>');
break;
case 6:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := struct.val'); reporteGramaticalProducciones.push('<instruccion> -> <struct>');
break;
case 7:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := asignacion_vector.val'); reporteGramaticalProducciones.push('<instruccion> -> <asignacion_vector>');
break;
case 8:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := asignacion.val'); reporteGramaticalProducciones.push('<instruccion> -> <asignacion>');
break;
case 9:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := decl_vectores.val'); reporteGramaticalProducciones.push('<instruccion> -> <decl_vectores>');
break;
case 10:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := decl_struct.val'); reporteGramaticalProducciones.push('<instruccion> -> <decl_struct>');
break;
case 11:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := push_vector.val'); reporteGramaticalProducciones.push('<instruccion> -> <push_vector>');
break;
case 12:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := pop_vector.val'); reporteGramaticalProducciones.push('<instruccion> -> <pop_vector>');
break;
case 13:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := sent_if.val'); reporteGramaticalProducciones.push('<instruccion> -> <sent_if>');
break;
case 14:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := sent_while.val'); reporteGramaticalProducciones.push('<instruccion> -> <sent_while>');
break;
case 15:
 this.$ = new Break(); reporteGramaticalTDS.push('instruccion.val := BREAK PYC'); reporteGramaticalProducciones.push('<instruccion> -> BREAK PYC');
break;
case 16:
 this.$ = new Continue(); reporteGramaticalTDS.push('instruccion.val := CONTINUE PYC'); reporteGramaticalProducciones.push('<instruccion> -> CONTINUE PYC');
break;
case 17:
 this.$ = new Retorno(null); reporteGramaticalTDS.push('instruccion.val := RETURN PYC'); reporteGramaticalProducciones.push('<instruccion> -> RETURN PYC');
break;
case 18:
 this.$ = new Retorno($$[$0-1]); reporteGramaticalTDS.push('instruccion.val := RETURN e.val PYC'); reporteGramaticalProducciones.push('<instruccion> -> RETURN <e> PYC');
break;
case 19:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := sent_switch.val'); reporteGramaticalProducciones.push('<instruccion> -> <sent_switch>');
break;
case 20:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := sent_for.val'); reporteGramaticalProducciones.push('<instruccion> -> <sent_for>');
break;
case 21:
this.$ = $$[$0-1]; reporteGramaticalTDS.push('instruccion.val := sent_do_while.val PYC'); reporteGramaticalProducciones.push('<instruccion> -> <sent_do_while> PYC');
break;
case 22:
 reporteGramaticalTDS.push('instruccion.val := ID DECRE PYC'); reporteGramaticalProducciones.push('<instruccion> -> ID DECRE PYC'); this.$ = new Asignacion($$[$0-2], new Aritmetica(new Identificador($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 23:
 reporteGramaticalTDS.push('instruccion.val := ID INCRE PYC'); reporteGramaticalProducciones.push('<instruccion> -> ID INCRE PYC'); this.$ = new Asignacion($$[$0-2], new Aritmetica(new Identificador($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 24:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := modi_vector.val'); reporteGramaticalProducciones.push('<instruccion> -> <modi_vector>');
break;
case 25:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := modi_struct.val'); reporteGramaticalProducciones.push('<instruccion> -> <modi_struct>');
break;
case 26:
 this.$ = $$[$0]; reporteGramaticalTDS.push('instruccion.val := funciones.val'); reporteGramaticalProducciones.push('<instruccion> -> <funciones>');
break;
case 27:
 this.$ = $$[$0-1]; reporteGramaticalTDS.push('instruccion.val := llamada.val PYC'); reporteGramaticalProducciones.push('<instruccion> -> <llamada> PYC');
break;
case 28:
console.log("Error Sintactico "  + yytext
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);

                           new Errores("Sintactico", "No se esperaba el caracter "+
                                           this._$.first_line, this._$.first_column);
                           
break;
case 29:
 reporteGramaticalTDS.push('lista_ids.val := lista_ids.val COMA ID'); reporteGramaticalProducciones.push('<lista_ids> -> <lista_ids> COMA ID'); this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 30:
 reporteGramaticalTDS.push('lista_ids.val := ID'); reporteGramaticalProducciones.push('<lista_ids> -> ID'); this.$ = new Array(); this.$.push($$[$0]);
break;
case 31:
 reporteGramaticalTDS.push('declaracion.val := tipo.val lsita_ids.val IGUAL e.val PYC'); reporteGramaticalProducciones.push('<declaracion> -> <tipo> <lsita_ids> IGUAL <e> PYC'); this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column); 
break;
case 32:
 reporteGramaticalTDS.push('declaracion.val := tipo.val lsita_ids.val PYC'); reporteGramaticalProducciones.push('<declaracion> -> <tipo> <lsita_ids> PYC'); this.$ = new Declaracion($$[$0-2],$$[$0-1],null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 33:
reporteGramaticalTDS.push('tipo.val := DOUBLE'); reporteGramaticalProducciones.push('<tipo> -> DOUBLE'); this.$ = new Tipo("DOBLE");
break;
case 34:
reporteGramaticalTDS.push('tipo.val := INT'); reporteGramaticalProducciones.push('<tipo> -> INT'); this.$ = new Tipo("ENTERO");
break;
case 35:
reporteGramaticalTDS.push('tipo.val := STRINGT'); reporteGramaticalProducciones.push('<tipo> -> STRINGT'); this.$ = new Tipo("CADENA");
break;
case 36:
reporteGramaticalTDS.push('tipo.val := CHAR'); reporteGramaticalProducciones.push('<tipo> -> CHAR'); this.$ = new Tipo("CARACTER");
break;
case 37:
reporteGramaticalTDS.push('tipo.val := BOOLEAN'); reporteGramaticalProducciones.push('<tipo> -> BOOLEAN'); this.$ = new Tipo("BOOLEAN");
break;
case 38:
reporteGramaticalTDS.push('decl_valores.val := tipo.val CORA CROC lista_ids.val IGUAL CORA lista_valores.val CORC PYC'); reporteGramaticalProducciones.push('<decl_valores> -> <tipo> CORA CROC <lista_ids> IGUAL CORA <lista_valores> CORC PYC'); this.$ = new DeclaracionVectores($$[$0-8],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 39:
reporteGramaticalTDS.push('decl_valores.val := tipo.val CORA CROC lista_ids.val IGUAL CORA CORC PYC'); reporteGramaticalProducciones.push('<decl_valores> -> <tipo> CORA CROC <lista_ids> IGUAL CORA CORC PYC'); this.$ = new DeclaracionVectores($$[$0-7],$$[$0-4],[],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 40:
reporteGramaticalTDS.push('decl_valores.val := tipo.val CORA CROC lista_ids.val PYC'); reporteGramaticalProducciones.push('<decl_valores> -> <tipo> CORA CROC <lista_ids> PYC'); this.$ = new DeclaracionVectores($$[$0-4],$$[$0-1],[],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 41:
this.$ = $$[$0-2]; this.$.push($$[$0]); reporteGramaticalTDS.push('lista_valores.val := lista_valores.val COMA e.val'); reporteGramaticalProducciones.push('<lista_valores> -> <lista_valores> COMA <e>');
break;
case 42:
this.$ = new Array(); this.$.push($$[$0]); reporteGramaticalTDS.push('lista_valores.val := e.val'); reporteGramaticalProducciones.push('<lista_valores> -> <e>');
break;
case 43:
 reporteGramaticalTDS.push('modi_vector.val := ID CORA e.val CORC IGUAL e.val PYC'); reporteGramaticalProducciones.push('<modi_vector> -> ID CORA <e> CORC IGUAL <e> PYC'); this.$ = new AccesoVector( $$[$0-6], $$[$0-4], $$[$0-1], true ,_$[$0-6].first_line,_$[$0-6].last_column ); 
break;
case 44:
 reporteGramaticalTDS.push('push_vector.val := ID PNT PUSH PARA e.val PARC'); reporteGramaticalProducciones.push('<push_vector> -> ID PNT PUSH PARA <e> PARC'); this.$ = new PushArreglo($$[$0-6], $$[$0-2], _$[$0-6].first_line,_$[$0-6].last_column);
break;
case 45:
 reporteGramaticalTDS.push('pop_vector.val := e.val PNT PUSH PARA PARC PYC'); reporteGramaticalProducciones.push('<pop_vector> -> <e> PNT PUSH PARA PARC PYC'); this.$ = new PopArreglo($$[$0-5], _$[$0-5].first_line,_$[$0-5].last_column);
break;
case 46:
reporteGramaticalTDS.push('asignacion_vector.val := tipo.val CORA CROC lista_ids.val IGUAL CORA lista_valores.val CORC PYC'); reporteGramaticalProducciones.push('<asignacion_vector> -> <tipo> CORA CROC <lista_ids> IGUAL CORA <lista_valores> CORC PYC'); this.$ = new AsignacionArreglo($$[$0-5],$$[$0-2],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 47:
reporteGramaticalTDS.push('asignacion_vector.val := tipo.val CORA CROC lista_ids.val IGUAL CORA CORC PYC'); reporteGramaticalProducciones.push('<asignacion_vector> -> <tipo> CORA CROC <lista_ids> IGUAL CORA CORC PYC'); this.$ = new AsignacionArreglo($$[$0-4],[],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 48:
 reporteGramaticalTDS.push('struct.val := STRUCTC ID LLAVA lista_atributos.val LLAVC'); reporteGramaticalProducciones.push('<struct> -> STRUCTC ID LLAVA <lista_atributos> LLAVC'); this.$ = new DefinicionStruct($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].last_column) 
break;
case 49:
 reporteGramaticalTDS.push('decl_struct.val := ID ID IGUAL ID PARA lista_valores.val PARC LLAVC'); reporteGramaticalProducciones.push('<decl_struct> -> ID ID IGUAL ID PARA <lista_valores> PARC LLAVC'); this.$ = new DeclaracionStruct( $$[$0-7], $$[$0-6], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].last_column );  
break;
case 50:
 reporteGramaticalTDS.push('lista_atributos.val := lista_atributos.val tipo.val ID PYC'); reporteGramaticalProducciones.push('<lista_atributos> -> <lista_atributos> <tipo> ID PYC'); this.$ = $$[$0-3]; this.$.push(new Simbolo(7, $$[$0-2], $$[$0-1], null));
break;
case 51:
 reporteGramaticalTDS.push('lista_atributos.val := tipo.val ID PYC'); reporteGramaticalProducciones.push('<lista_atributos> -> <tipo> ID PYC'); this.$ = new Array(); this.$.push(new Simbolo(7, $$[$0-2], $$[$0-1], null));
break;
case 52:
 reporteGramaticalTDS.push('modi_struct.val := ID PNT ID IGUAL e.val PYC'); reporteGramaticalProducciones.push('<modi_struct> -> ID PNT ID IGUAL <e> PYC'); this.$ = new ModificarStruct($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].last_column ); 
break;
case 53:
 reporteGramaticalTDS.push('impresion.val := PRINTLN PARA e.val PARC PYC'); reporteGramaticalProducciones.push('<impresion> -> PRINTLN PARA <e> PARC PYC'); this.$ = new Println($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 54:
 reporteGramaticalTDS.push('impresion.val := PRINT PARA e.val PARC PYC'); reporteGramaticalProducciones.push('<impresion> -> PRINT PARA <e> PARC PYC'); this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 55:
 reporteGramaticalTDS.push('asignacion.val := ID IGUAL e.val PYC'); reporteGramaticalProducciones.push('<asignacion> -> ID IGUAL <e> PYC'); this.$ = new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 56:
 reporteGramaticalTDS.push('asignacion.val := IF PARA e.val PARC LLAVA instrucciones.val LLAVC'); reporteGramaticalProducciones.push('<asignacion> -> IF PARA <e> PARC LLAVA <instrucciones> LLAVC'); this.$ = new Ifs($$[$0-4],$$[$0-1],[],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 57:
 reporteGramaticalTDS.push('asignacion.val := IF PARA e.val PARC LLAVA instrucciones.val LLAVC ELSE LLAVA instrucciones.val LLAVC'); reporteGramaticalProducciones.push('<asignacion> -> IF PARA <e> PARC LLAVA <instrucciones> LLAVC ELSE LLAVA <instrucciones> LLAVC'); this.$ = new Ifs($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 58:
 reporteGramaticalTDS.push('asignacion.val := IF PARA e.val PARC LLAVA instrucciones.val LLAVC ELSE sent_if.val'); reporteGramaticalProducciones.push('<asignacion> -> IF PARA <e> PARC LLAVA <instrucciones> LLAVC ELSE <sent_if>'); this.$ = new Ifs($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 59:
reporteGramaticalTDS.push('sent_switch.val := SWITCH PARA e.val PARC LLAVA list_case.val LLAVC'); reporteGramaticalProducciones.push('<sent_switch> -> SWITCH PARA <e> PARC LLAVA <list_case> LLAVC');  this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 60:
reporteGramaticalTDS.push('sent_switch.val := SWITCH PARA e.val PARC LLAVA list_case.val default.val LLAVC'); reporteGramaticalProducciones.push('<sent_switch> -> SWITCH PARA <e> PARC LLAVA <list_case> <default> LLAVC');  this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 61:
reporteGramaticalTDS.push('sent_switch.val := SWITCH PARA e.val PARC LLAVA default.val LLAVC'); reporteGramaticalProducciones.push('<sent_switch> -> SWITCH PARA <e> PARC LLAVA <default> LLAVC');  this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 62:
this.$ = $$[$0-1]; this.$.push($$[$0]); reporteGramaticalTDS.push('list_case.val := list_case.val caso.val'); reporteGramaticalProducciones.push('<list_case> -> <list_case> <caso>'); 
break;
case 63:
this.$ = new Array(); this.$.push($$[$0]); reporteGramaticalTDS.push('list_case.val := caso.val'); reporteGramaticalProducciones.push('<list_case> -> <caso>'); 
break;
case 64:
this.$ = new Caso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column); reporteGramaticalTDS.push('caso.val := CASE e.val DOSPUNTOS instrucciones.val'); reporteGramaticalProducciones.push('<caso> -> CASE <e> DOSPUNTOS <instrucciones>'); 
break;
case 65:
this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column); reporteGramaticalTDS.push('sent_while.val := WHILE PARA e.val PARC LLAVA instrucciones.val LLAVC'); reporteGramaticalProducciones.push('<sent_while> -> WHILE PARA <e> PARC LLAVA <instrucciones> LLAVC'); 
break;
case 66:
this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column); reporteGramaticalTDS.push('sent_for.val := FOR PARA dec_asignacion_for.val PYC e.val PYC actualizacion_for.val PARC LLAVA instrucciones.val LLAVC'); reporteGramaticalProducciones.push('<sent_for> -> FOR PARA <dec_asignacion_for> PYC <e> PYC <actualizacion_for> PARC LLAVA <instrucciones> LLAVC'); 
break;
case 67:
 reporteGramaticalTDS.push('dec_asignacion_for.val := tipo.val ID IGUAL e.val'); reporteGramaticalProducciones.push('<dec_asignacion_for> -> <tipo> ID IGUAL <e>'); this.$ = new Declaracion($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 68:
 reporteGramaticalTDS.push('dec_asignacion_for.val := ID IGUAL e.val'); reporteGramaticalProducciones.push('<dec_asignacion_for> -> ID IGUAL <e>'); this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 69:
this.$ = new Caso(null,$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 70:
 reporteGramaticalTDS.push('actualizacon_for.val := ID DECRE'); reporteGramaticalProducciones.push('<actualizacon_for> -> ID DECRE'); this.$ = new Asignacion($$[$0-1],new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column );
break;
case 71:
 reporteGramaticalTDS.push('actualizacon_for.val := ID INCRE'); reporteGramaticalProducciones.push('<actualizacon_for> -> ID INCRE'); this.$ = new Asignacion($$[$0-1],new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column );
break;
case 72:
 reporteGramaticalTDS.push('actualizacon_for.val := ID IGUAL e.val'); reporteGramaticalProducciones.push('<actualizacon_for> -> ID IGUAL <e>'); this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 73:
 reporteGramaticalTDS.push('sent_do_while.val := DO LLAVA instrucciones.val LLAVC WHILE PARA e.val PARC'); reporteGramaticalProducciones.push('<sent_do_while> -> DO LLAVA <instrucciones> LLAVC WHILE PARA <e> PARC'); this.$ = new DoWhile($$[$0-1],$$[$0-5],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 74:
 reporteGramaticalTDS.push('funciones.val := tipo.val ID PARA lista_parametros.val PARC LLAVA instrucciones.val LLAVC '); reporteGramaticalProducciones.push('<funciones> -> <tipo> ID PARA <lista_parametros> PARC LLAVA <instrucciones> LLAVC '); this.$ = new Funcion(2, $$[$0-7], $$[$0-6], $$[$0-4], false, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 75:
 reporteGramaticalTDS.push('funciones.val := tipo.val ID PARA PARC LLAVA instrucciones.val LLAVC '); reporteGramaticalProducciones.push('<funciones> -> <tipo> ID PARA PARC LLAVA <instrucciones> LLAVC '); this.$ = new Funcion(2, $$[$0-6], $$[$0-5], [], false, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 76:
 reporteGramaticalTDS.push('funciones.val := VOID ID PARA lista_parametros.val PARC LLAVA instrucciones.val LLAVC'); reporteGramaticalProducciones.push('<funciones> -> VOID ID PARA <lista_parametros> PARC LLAVA <instrucciones> LLAVC'); this.$ = new Funcion(3, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 77:
 reporteGramaticalTDS.push('funciones.val :=  VOID ID PARA PARC LLAVA instrucciones.val LLAVC '); reporteGramaticalProducciones.push('<funciones> ->  VOID ID PARA PARC LLAVA <instrucciones> LLAVC '); this.$ = new Funcion(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 78:
 reporteGramaticalTDS.push('funciones.val :=  VOID MAIN PARA PARC LLAVA instrucciones.val LLAVC '); reporteGramaticalProducciones.push('<funciones> ->  VOID MAIN PARA PARC LLAVA <instrucciones> LLAVC '); this.$ = new Fmain(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 79:
 reporteGramaticalTDS.push('lista_parametros.val := lista_parametros.val COMA tipo.val ID'); reporteGramaticalProducciones.push('<lista_parametros> -> <lista_parametros> COMA <tipo> ID'); this.$ = $$[$0-3]; this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 80:
 reporteGramaticalTDS.push('lista_parametros.val := tipo.val ID'); reporteGramaticalProducciones.push('<lista_parametros> -> <tipo> ID'); this.$ = new Array(); this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 81:
 reporteGramaticalTDS.push('llamada.val := ID PARA lista_valores.val PARC'); reporteGramaticalProducciones.push('<llamada> -> ID PARA <lista_valores> PARC'); this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column);
break;
case 82:
 reporteGramaticalTDS.push('llamada.val := ID PARA PARC'); reporteGramaticalProducciones.push('<llamada> -> ID PARA PARC'); this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 83:
 reporteGramaticalTDS.push('e.val := <e> MAS <e>');  reporteGramaticalProducciones.push('<e> -> <e> MAS <e>');  this.$ = new Aritmetica($$[$0-2], '+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 84:
 reporteGramaticalTDS.push('e.val := ID'); reporteGramaticalProducciones.push('<e> -> ID'); this.$ = new Identificador($$[$0],_$[$0].first_line,_$[$0].last_column);
break;
case 85:
 reporteGramaticalTDS.push('e.val := ID DECRE'); reporteGramaticalProducciones.push('<e> -> ID DECRE'); this.$ = new Asignacion($$[$0-1],new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column );
break;
case 86:
 reporteGramaticalTDS.push('e.val := ID INCRE'); reporteGramaticalProducciones.push('<e> -> ID INCRE'); this.$ = new Asignacion($$[$0-1],new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column );
break;
case 87:
 reporteGramaticalTDS.push('e.val := PARA tipo.val PARC e.val'); reporteGramaticalProducciones.push('<e> -> PARA <tipo> PARC <e>'); this.$ = new Casteos($$[$0-2],$$[$0], _$[$0-3].first_line,_$[$0-3].last_column);
break;
case 88:
 reporteGramaticalTDS.push('e.val := ID CORA e.val DOSPUNTOS e.val CORC'); reporteGramaticalProducciones.push('<e> -> ID CORA <e> DOSPUNTOS <e> CORC'); this.$ = new SliceVector( $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line,_$[$0-5].last_column ); 
break;
case 89:
reporteGramaticalTDS.push('e.val := ID CORA e.val CORC'); reporteGramaticalProducciones.push('<e> -> ID CORA <e> CORC'); this.$ = new AccesoVector($$[$0-3], $$[$0-1], $$[$0-1], false ,_$[$0-3].first_line,_$[$0-3].last_column); 
break;
case 90:
reporteGramaticalTDS.push('e.val := e.val MENOS e.val'); reporteGramaticalProducciones.push('<e> -> <e> MENOS <e>');  this.$ = new Aritmetica($$[$0-2], '-', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 91:
reporteGramaticalTDS.push('e.val := e.val MULTI e.val'); reporteGramaticalProducciones.push('<e> -> <e> MULTI <e>');  this.$ = new Aritmetica($$[$0-2], '*', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 92:
reporteGramaticalTDS.push('e.val := e.val DIV e.val'); reporteGramaticalProducciones.push('<e> -> <e> DIV <e>');  this.$ = new Aritmetica($$[$0-2], '/', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 93:
reporteGramaticalTDS.push('e.val := e.val POT e.val'); reporteGramaticalProducciones.push('<e> -> <e> POT <e>');  this.$ = new Aritmetica($$[$0-2], '^', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 94:
reporteGramaticalTDS.push('e.val := e.val MOD e.val'); reporteGramaticalProducciones.push('<e> -> <e> MOD <e>');  this.$ = new Aritmetica($$[$0-2], '%', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 95:
reporteGramaticalTDS.push('e.val := e.val MAYORIGUAL e.val'); reporteGramaticalProducciones.push('<e> -> <e> MAYORIGUAL <e>');  this.$ = new Relacional($$[$0-2], '>=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 96:
reporteGramaticalTDS.push('e.val := e.val MAYORQUE e.val'); reporteGramaticalProducciones.push('<e> -> <e> MAYORQUE <e>');  this.$ = new Relacional($$[$0-2], '>', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 97:
reporteGramaticalTDS.push('e.val := e.val MENORIGUAL e.val'); reporteGramaticalProducciones.push('<e> -> <e> MENORIGUAL <e>');  this.$ = new Relacional($$[$0-2], '<=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 98:
reporteGramaticalTDS.push('e.val := e.val MENORQUE e.val'); reporteGramaticalProducciones.push('<e> -> <e> MENORQUE <e>');  this.$ = new Relacional($$[$0-2], '<', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 99:
reporteGramaticalTDS.push('e.val := e.val IGUALIGUAL e.val'); reporteGramaticalProducciones.push('<e> -> <e> IGUALIGUAL <e>');  this.$ = new Relacional($$[$0-2], '==', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 100:
reporteGramaticalTDS.push('e.val := e.val DIFERENTE e.val'); reporteGramaticalProducciones.push('<e> -> <e> DIFERENTE <e>');  this.$ = new Relacional($$[$0-2], '!=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 101:
reporteGramaticalTDS.push('e.val := e.val AND e.val'); reporteGramaticalProducciones.push('<e> -> <e> AND <e>');  this.$ = new Logicas($$[$0-2],'&&', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 102:
reporteGramaticalTDS.push('e.val := e.val ANDD e.val'); reporteGramaticalProducciones.push('<e> -> <e> ANDD <e>');  this.$ = new Aritmetica($$[$0-2],'+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 103:
reporteGramaticalTDS.push('e.val := e.val OR e.val'); reporteGramaticalProducciones.push('<e> -> <e> OR <e>');  this.$ = new Logicas($$[$0-2],'||', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 104:
 reporteGramaticalTDS.push('e.val := e.val INTERROGACION e.val DOSPUNTOS e.val'); reporteGramaticalProducciones.push('<e> -> <e> INTERROGACION <e> DOSPUNTOS <e>'); this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 105:
 reporteGramaticalTDS.push('e.val := e.val PNT CARAOFPOS PARA e.val COMA e.val PARC'); reporteGramaticalProducciones.push('<e> -> <e> PNT CARAOFPOS PARA <e> COMA <e> PARC'); this.$ = new  CharOfPosition($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 106:
 reporteGramaticalTDS.push('e.val := ID PNT ID'); reporteGramaticalProducciones.push('<e> -> ID PNT ID ');  this.$ = new AccesoStruct($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 107:
 reporteGramaticalTDS.push('e.val := ID PNT CARALENGHT PARA PARC'); reporteGramaticalProducciones.push('<e> -> ID PNT CARALENGHT PARA PARC'); this.$ = new LenghtC($$[$0-4], _$[$0-4].first_line,_$[$0-4].last_column);
break;
case 108:
 reporteGramaticalTDS.push('e.val := ID PNT POP PARA PARC'); reporteGramaticalProducciones.push('<e> -> ID PNT POP PARA PARC'); this.$ = new PopArreglo($$[$0-4], _$[$0-4].first_line,_$[$0-4].last_column);
break;
case 109:
 reporteGramaticalTDS.push('e.val :=  e.val e.val'); reporteGramaticalProducciones.push('<e> ->  e <e>');  this.$ = new Aritmetica($$[$0-3], '^', $$[$0-1], _$[$0-5].first_line,_$[$0-5].last_column, false);
break;
case 110:
reporteGramaticalTDS.push('e.val := SQRT PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> SQRT PARA <e> PARC');  this.$ = new Aritmetica($$[$0-1], 'sqrt', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 111:
reporteGramaticalTDS.push('e.val := SIN PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> SIN PARA <e> PARC');  this.$ = new Aritmetica($$[$0-1], 'sin', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 112:
reporteGramaticalTDS.push('e.val := COS PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> COS PARA <e> PARC');  this.$ = new Aritmetica($$[$0-1], 'cos', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 113:
reporteGramaticalTDS.push('e.val := TAN PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> TAN PARA <e> PARC');  this.$ = new Aritmetica($$[$0-1], 'tan', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 114:
reporteGramaticalTDS.push('e.val := NOT e.val'); reporteGramaticalProducciones.push('<e> -> NOT <e>');  this.$ = new Logicas($$[$0],'!', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 115:
reporteGramaticalTDS.push('e.val := MENOS e.val %prec UMINUS'); reporteGramaticalProducciones.push('<e> -> MENOS <e> %prec UMINUS');  this.$ = new Aritmetica($$[$0], 'UNARIO', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 116:
reporteGramaticalTDS.push('e.val := PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> PARA e PARC');  this.$ = $$[$0-1];
break;
case 117:
 reporteGramaticalTDS.push('e.val := DECIMAL'); reporteGramaticalProducciones.push('<e> -> DECIMAL'); this.$ = new Primitivo(Number($$[$0]),'DOBLE',_$[$0].first_line,_$[$0].last_column);
break;
case 118:
 reporteGramaticalTDS.push('e.val := ENTERO'); reporteGramaticalProducciones.push('<e> -> ENTERO'); this.$ = new Primitivo(Number($$[$0]),'ENTERO',_$[$0].first_line,_$[$0].last_column);
break;
case 119:
 reporteGramaticalTDS.push('e.val := CADENA'); reporteGramaticalProducciones.push('<e> -> CADENA'); $$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CADENA',_$[$0].first_line,_$[$0].last_column);
break;
case 120:
 reporteGramaticalTDS.push('e.val := NULLL'); reporteGramaticalProducciones.push('<e> -> NULLL'); this.$ = new Primitivo(null,'NULL',_$[$0].first_line,_$[$0].last_column);
break;
case 121:
 reporteGramaticalTDS.push('e.val := CARACTER'); reporteGramaticalProducciones.push('<e> -> CARACTER'); $$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CARACTER',_$[$0].first_line,_$[$0].last_column);
break;
case 122:
 reporteGramaticalTDS.push('e.val := TRUE'); reporteGramaticalProducciones.push('<e> -> TRUE'); this.$ = new Primitivo(true,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 123:
 reporteGramaticalTDS.push('e.val := FALSE'); reporteGramaticalProducciones.push('<e> -> FALSE'); this.$ = new Primitivo(false,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 125:
  reporteGramaticalTDS.push('e.val := TOINT PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> TOINT PARA <e> PARC'); this.$ = new ToInt($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 126:
   reporteGramaticalTDS.push('e.val := TODOUBLE PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> TODOUBLE PARA <e> PARC'); this.$ = new ToDouble($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 127:
  reporteGramaticalTDS.push('e.val := ROUND PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> ROUND PARA <e> PARC'); this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 128:
  reporteGramaticalTDS.push('e.val := TYPEOF PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> TYPEOF PARA <e> PARC'); this.$ = new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 129:
  reporteGramaticalTDS.push('e.val := STRING PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> STRING PARA <e> PARC'); this.$ = new Tostring($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 130:
 reporteGramaticalTDS.push('e.val := BOOLEAN PNT PARSE PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> BOOLEAN PNT PARSE PARA <e> PARC'); this.$ = new TipoParse($$[$0-1],"booleano",_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 131:
 reporteGramaticalTDS.push('e.val := INT PNT PARSE PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> INT PNT PARSE PARA <e> PARC'); this.$ = new TipoParse($$[$0-1],"int",_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 132:
 reporteGramaticalTDS.push('e.val := DOUBLE PNT PARSE PARA e.val PARC'); reporteGramaticalProducciones.push('<e> -> DOUBLE PNT PARSE PARA <e> PARC'); this.$ = new TipoParse($$[$0-1],"doble",_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 133:
 reporteGramaticalTDS.push('e.val := e.val PNT TOUPPER PARA PARC'); reporteGramaticalProducciones.push('<e> -> <e> PNT TOUPPER PARA PARC'); this.$ = new Toupper($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 134:
 reporteGramaticalTDS.push('e.val := e.val PNT TOLOWER PARA PARC'); reporteGramaticalProducciones.push('<e> -> <e> PNT TOLOWER PARA PARC'); this.$ = new Tolower($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 135:
 reporteGramaticalTDS.push('e.val := e.val PNT SUBSTR PARA e.val COMA e.val PARC'); reporteGramaticalProducciones.push('<e> -> <e> PNT SUBSTR PARA <e> COMA <e> PARC'); this.$ = new  SubString($$[$0-7],$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{1:[3]},{2:$V0,5:[1,42],6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),{19:[1,44]},{19:[1,45]},{19:[1,46],22:47,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($Vj,[2,19]),o($Vj,[2,20]),{19:[1,73]},{26:[1,77],27:[1,74],28:[1,75],36:[1,76],42:[1,79],45:[1,78],47:$VI},o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),{19:[1,81]},o($Vj,[2,28]),{26:[1,84],33:82,42:[1,83]},{47:[1,85]},{47:[1,86]},{26:[1,87]},{47:[1,88]},{47:[1,89]},{47:[1,90]},{47:[1,91]},{51:[1,92]},{26:[1,93],72:[1,94]},o($VJ,$VK),o($VJ,$VL),o($VM,[2,35]),o($VM,[2,36]),o($VJ,$VN),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),{19:[1,95],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},o($V31,[2,84],{27:[1,113],28:[1,114],42:[1,115],47:$VI}),{22:117,26:$Vk,32:64,35:116,37:[1,118],38:[1,119],39:$V7,40:$V8,41:[1,120],47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{47:[1,121]},{47:[1,122]},{47:[1,123]},{47:[1,124]},{47:[1,125]},{22:126,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:127,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($V31,[2,117]),o($V31,[2,118]),o($V31,[2,119]),o($V31,[2,120]),o($V31,[2,121]),o($V31,[2,122]),o($V31,[2,123]),o($V31,[2,124]),{47:[1,128]},{47:[1,129]},{47:[1,130]},{47:[1,131]},{47:[1,132]},{45:$V41},{45:$V51},{45:$V61},o($Vj,[2,21]),{19:[1,136]},{19:[1,137]},{22:139,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,42:[1,138],47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{36:[1,140]},{26:[1,143],46:[1,141],49:[1,142]},{22:144,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:147,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,44:145,47:$Vo,48:[1,146],74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($Vj,[2,27]),{19:[1,149],34:$V71,36:[1,148]},{43:[1,151]},o($V81,$V91,{47:[1,152]}),{22:153,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:154,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{51:[1,155]},{22:156,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:157,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:158,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{26:[1,161],35:160,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,66:159},{2:$V0,4:162,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{47:[1,163]},{47:[1,164]},o($Vj,[2,18]),{22:165,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:166,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:167,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:168,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:169,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:170,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:171,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:172,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:173,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:174,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:175,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:176,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:177,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:178,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:179,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:180,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:182,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,49:[1,184],74:$Vp,77:$Vq,89:[1,181],90:[1,183],91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH,109:[1,185],110:[1,186],111:[1,187]},o($V31,[2,85]),o($V31,[2,86]),{22:188,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{48:[1,189]},{45:$VO,48:[1,190],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$V61,48:$VK},{45:$V51,48:$VL},{45:$V41,48:$VN},{22:191,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:192,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:193,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:194,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:195,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($Va1,[2,114],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_}),o($V31,[2,115]),{22:196,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:197,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:198,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:199,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:200,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{108:[1,201]},{108:[1,202]},{108:[1,203]},o($Vj,[2,22]),o($Vj,[2,23]),{22:147,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,43:[1,205],44:204,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{19:[1,206],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{26:[1,207]},{47:[1,208]},{47:[1,209]},{36:[1,210]},{43:[1,211],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{34:$Vb1,48:[1,212]},o($V31,[2,82]),o($Vc1,[2,42],{45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21}),{22:214,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($Vj,[2,32]),{26:[1,215]},{26:[1,217],33:216},{35:220,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,48:[1,219],70:218},{45:$VO,48:[1,221],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,222],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{35:224,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,52:223},{45:$VO,48:[1,225],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,226],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,227],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{19:[1,228]},{26:[1,229]},{36:[1,230]},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,231],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{35:220,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,48:[1,233],70:232},{48:[1,234]},o($Vd1,[2,83],{75:$VR,76:$VS,77:$VT,78:$VU}),o($Vd1,[2,90],{75:$VR,76:$VS,77:$VT,78:$VU}),o($Ve1,[2,91],{77:$VT,78:$VU}),o($Ve1,[2,92],{77:$VT,78:$VU}),o($Vf1,[2,93],{78:$VU}),o($Vf1,[2,94],{78:$VU}),o($Vg1,[2,95],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU}),o($Vg1,[2,96],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU}),o($Vg1,[2,97],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU}),o($Vg1,[2,98],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU}),o($Vg1,[2,99],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU}),o($Vg1,[2,100],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU}),o($Va1,[2,101],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_}),o($Va1,[2,102],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_}),o([19,34,43,45,48,63,87,88],[2,103],{73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01}),{45:$VO,63:[1,235],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{47:[1,236]},o($Vh1,[2,106],{45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11}),{47:[1,237]},{47:[1,238]},{47:[1,239]},{47:[1,240]},{47:[1,241]},{43:[1,243],45:$VO,63:[1,242],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{22:244,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($V31,[2,116]),{34:[1,245],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,246],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,247],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,248],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,249],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,250],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,251],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,252],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,253],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,254],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{47:[1,255]},{47:[1,256]},{47:[1,257]},{34:$Vb1,43:[1,258]},{19:[1,259]},o($Vj,[2,55]),{47:[1,260]},{22:261,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{48:[1,262]},{22:263,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{36:[1,264]},o($V31,[2,81]),{22:265,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{19:[1,266],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},o($V81,[2,29]),{19:[1,268],34:$V71,36:[1,267]},o($V81,$V91),{34:$Vi1,48:[1,269]},{51:[1,271]},{26:[1,272]},{19:[1,273]},{19:[1,274]},{35:276,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,53:[1,275]},{26:[1,277]},{51:[1,278]},{51:[1,279]},{51:[1,280]},{22:281,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{36:[1,282]},{22:283,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{64:[1,284]},{34:$Vi1,48:[1,285]},{51:[1,286]},{51:[1,287]},{22:288,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:289,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{48:[1,290]},{48:[1,291]},{48:[1,292]},{48:[1,293]},{22:294,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:295,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($V31,[2,89]),o($Vh1,[2,87],{45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11}),{22:296,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($V31,[2,110]),o($V31,[2,111]),o($V31,[2,112]),o($V31,[2,113]),o($V31,[2,125]),o($V31,[2,126]),o($V31,[2,127]),o($V31,[2,128]),o($V31,[2,129]),{22:297,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:298,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{22:299,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{19:[1,300]},o($Vj,[2,47]),{22:147,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,44:301,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{45:$VO,48:[1,302],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{19:[1,303]},{19:[1,304],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{22:305,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($Vc1,[2,41],{45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21}),o($Vj,[2,31]),{42:[1,306]},o($Vj,[2,40]),{51:[1,307]},{35:308,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9},{2:$V0,4:309,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o($Vj1,[2,80]),o($Vj,[2,53]),o($Vj,[2,54]),o($Vj,[2,48]),{26:[1,310]},{19:[1,311]},{2:$V0,4:312,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{2:$V0,4:313,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{59:314,60:315,61:316,62:$Vk1,68:$Vl1},{19:[1,319],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{22:320,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{19:[2,68],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{47:[1,321]},{51:[1,322]},{2:$V0,4:323,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{2:$V0,4:324,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o([19,34,43,48,63],[2,104],{45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21}),{45:$VO,48:[1,325],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},o($V31,[2,107]),o($V31,[2,108]),o($V31,[2,133]),o($V31,[2,134]),{34:[1,326],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{43:[1,327],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,328],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,329],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,330],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{45:$VO,48:[1,331],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},o($Vj,[2,46]),{34:$Vb1,48:[1,332]},{19:[1,333]},o($Vj,[2,45]),o($Vj,[2,52]),{19:[1,334],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{22:147,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,43:[1,336],44:335,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{2:$V0,4:337,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{26:[1,338]},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,339],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{19:[1,340]},o($Vm1,[2,51]),{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,341],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,342],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{53:[1,343],60:344,61:345,62:$Vk1,68:$Vl1},{53:[1,346]},o($Vn1,[2,63]),{63:[1,347]},{22:348,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{26:[1,350],67:349},{19:[2,67],45:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{22:351,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{2:$V0,4:352,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,353],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,354],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o($V31,[2,105]),{22:355,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},o($V31,[2,88]),o($V31,[2,109]),o($V31,[2,130]),o($V31,[2,131]),o($V31,[2,132]),{19:[1,356]},o($Vj,[2,44]),o($Vj,[2,43]),{34:$Vb1,43:[1,357]},{19:[1,358]},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,359],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o($Vj1,[2,79]),o($Vj,[2,75]),o($Vm1,[2,50]),o($Vj,[2,56],{57:[1,360]}),o($Vj,[2,65]),o($Vj,[2,59]),{53:[1,361]},o($Vn1,[2,62]),o($Vj,[2,61]),{2:$V0,4:362,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{45:$VO,63:[1,363],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{48:[1,364]},{27:[1,365],28:[1,366],36:[1,367]},{45:$VO,48:[1,368],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,369],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o($Vj,[2,77]),o($Vj,[2,78]),{45:$VO,48:[1,370],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},o($Vj,[2,49]),{19:[1,371]},o($Vj,[2,39]),o($Vj,[2,74]),{16:373,51:[1,372],56:$Vd},o($Vj,[2,60]),{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[2,69],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{2:$V0,4:374,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{51:[1,375]},{48:[2,70]},{48:[2,71]},{22:376,26:$Vk,32:64,37:$Vl,38:$Vm,41:$Vn,47:$Vo,74:$Vp,77:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG,107:$VH},{19:[2,73]},o($Vj,[2,76]),o($V31,[2,135]),o($Vj,[2,38]),{2:$V0,4:377,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o($Vj,[2,58]),o($Vn1,[2,64],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,23:18,24:19,25:20,29:22,30:23,31:24,32:25,35:27,6:43,2:$V0,18:$V1,20:$V2,21:$V3,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi}),{2:$V0,4:378,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{45:$VO,48:[2,72],73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,379],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,20:$V2,21:$V3,23:18,24:19,25:20,26:$V4,29:22,30:23,31:24,32:25,35:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,53:[1,380],54:$Vb,55:$Vc,56:$Vd,58:$Ve,64:$Vf,65:$Vg,69:$Vh,71:$Vi},o($Vj,[2,57]),o($Vj,[2,66])],
defaultActions: {42:[2,1],365:[2,70],366:[2,71],368:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};



        const {Aritmetica} = require('../Expresiones/Operaciones/Aritmetica');
        const {Primitivo} = require('../Expresiones/Primitivo');
        const {Relacional} = require('../Expresiones/Operaciones/Relacionales')
        const {Logicas} = require('../Expresiones/Operaciones/Logicas')
        const {Println} = require('../Instrucciones/Println');
        const {Print} = require('../Instrucciones/Print');
        const {Tolower} = require('../Instrucciones/Tolower');
        const {Toupper} = require('../Instrucciones/Toupper');
        const {ToInt} = require('../Instrucciones/FuncionesNativas/ToInt');
        const {ToDouble} = require('../Instrucciones/FuncionesNativas/ToDouble');
        const {Round} = require('../Instrucciones/FuncionesNativas/Round');
        const {Typeof} = require('../Instrucciones/FuncionesNativas/Typeof');
        const {Tostring} = require('../Instrucciones/FuncionesNativas/Tostring');
        const {SubString} = require('../Instrucciones/SubString')
        const {TipoParse} = require('../Instrucciones/FuncionesNativas/TipoParse')
        const {CharOfPosition} = require('../Instrucciones/CharOfPosition')
        const {LenghtC} = require('../Instrucciones/LenghtC')
        const {Casteos} = require('../Instrucciones/FuncionesNativas/Casteos');
        const {Declaracion} = require('../Instrucciones/Declaracion');

        // Vectores
        const {DeclaracionVectores} = require('../Instrucciones/DeclaracionVectores');
        const {SliceVector} = require('../Instrucciones/Vector/SliceVector');
        const {PushArreglo} = require('../Instrucciones/Vector/PushArreglo');
        const {PopArreglo} = require('../Instrucciones/Vector/PopArreglo');
        const {AsignacionArreglo} = require('../Instrucciones/Vector/AsignacionArreglo');
        const {AccesoVector} = require('../Expresiones/AccesoVector');

        // Structs
        const { DefinicionStruct } = require('../Instrucciones/Struct/DefinicionStruct');
        const { DeclaracionStruct } = require('../Instrucciones/Struct/DeclaracionStruct')
        const { ModificarStruct } = require('../Instrucciones/Struct/ModificarStruct')
        const { AccesoStruct } = require('../Expresiones/AccesoStruct')

        const {Asignacion} = require('../Instrucciones/Asignacion');
        const {Ifs} = require('../Instrucciones/SentenciasdeControl/Ifs');
        const {While }= require('../Instrucciones/SentenciasCiclicas/While');
        const {DoWhile}= require('../Instrucciones/SentenciasCiclicas/DoWhile');
        const {Ast} = require('../AST/Ast');
        const {Errores} = require('../AST/Errores');
        const {Tipo} = require('../TablaSimbolos/Tipo');
        const {Simbolo} = require('../TablaSimbolos/Simbolo');
        const {Identificador} = require('../Expresiones/identificador');
        const {Ternario} = require('../Expresiones/Ternario');
        const {Break} = require('../Instrucciones/SentenciadeTransferencia/Break');
        const {Retorno} = require('../Instrucciones/SentenciadeTransferencia/Return');
        const {Continue} = require('../Instrucciones/SentenciadeTransferencia/Continue');
        const {Switch} = require('../Instrucciones/SentenciasdeControl/Switch');
        const {Caso} = require('../Instrucciones/SentenciasdeControl/caso');
        const {For} = require('../Instrucciones/SentenciasCiclicas/For');
        const {Funcion} = require('../Instrucciones/Funcion');
        const {Llamada} = require('../Instrucciones/Llamada');
        const {Fmain} = require('../Instrucciones/Fmain');

        var reporteGramaticalProducciones = [];
        var reporteGramaticalTDS = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoramos los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lineas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 47 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 48 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 51 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 53 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 45 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 19 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 36 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 63 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 94 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 'EVALUAR'
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 101
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 102
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 38
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 107
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 39
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 37
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 40
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 41
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 71
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 99
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 54
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 110
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 109
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 103
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 104
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 105
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 106
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 'TOSTRING'
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 111
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 89
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 90
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 108
break;
case 62:console.log("Reconocio: "+yy_.yytext); return 46
break;
case 63:console.log("Reconocio: "+yy_.yytext); return 49
break;
case 64:console.log("Reconocio: "+yy_.yytext); return 56
break;
case 65:console.log("Reconocio: "+yy_.yytext); return 57
break;
case 66:console.log("Reconocio: "+yy_.yytext); return 64
break;
case 67:console.log("Reconocio: "+yy_.yytext); return 18
break;
case 68:console.log("Reconocio: "+yy_.yytext); return 58
break;
case 69:console.log("Reconocio: "+yy_.yytext); return 62
break;
case 70:console.log("Reconocio: "+yy_.yytext); return 69
break;
case 71:console.log("Reconocio: "+yy_.yytext); return 68
break;
case 72:console.log("Reconocio: "+yy_.yytext); return 65
break;
case 73:console.log("Reconocio: "+yy_.yytext); return 'DYNAMICLIST'
break;
case 74:console.log("Reconocio: "+yy_.yytext); return 'NEW'
break;
case 75:console.log("Reconocio: "+yy_.yytext); return 'APPEND'
break;
case 76:console.log("Reconocio: "+yy_.yytext); return 'SETVALUE'
break;
case 77:console.log("Reconocio: "+yy_.yytext); return 'GETVALUE'
break;
case 78:console.log("Reconocio: "+yy_.yytext); return 20
break;
case 79:console.log("Reconocio: "+yy_.yytext); return 21
break;
case 80:console.log("Reconocio: "+yy_.yytext); return 50
break;
case 81:console.log("Reconocio: "+yy_.yytext); return 72
break;
case 82:console.log("Reconocio: "+yy_.yytext); return 96
break;
case 83:console.log("Reconocio: "+yy_.yytext); return 97
break;
case 84:console.log("Reconocio: "+yy_.yytext); return 26
break;
case 85:console.log("Reconocio: "+yy_.yytext); return 98
break;
case 86:console.log("Reconocio: "+yy_.yytext); return 100
break;
case 87:/*Espacios se ignoran */ 
break;
case 88:return 5
break;
case 89:console.log("Error Lexico " + yy_.yytext
                        + "linea "+ yy_.yylineno
                        + "columna " +(yy_.yylloc.last_column+1));

                        new Errores('Lexico','El caracter '+ yy_.yytext
                                + ' no forma parte del lenguaje',
                                yy_.yylineno+1,
                                yy_.yylloc.last_column+1);
                        
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:=)/,/^(?:\?)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:pow\b)/,/^(?:!)/,/^(?:%)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:evaluar\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:string\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:dynamiclist\b)/,/^(?:new\b)/,/^(?:append\b)/,/^(?:setvalue\b)/,/^(?:getvalue\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:struct\b)/,/^(?:main\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:([0-9]+))/,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/,/^(?:(("((\\([\'\"\\nrt]))|([^\"\\]))*")))/,/^(?:(('((\\([\'\"\\nrt]))|([^\'\\]))')))/,/^(?:[\s\r\n\t])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}