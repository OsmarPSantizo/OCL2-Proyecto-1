/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,15],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,40],$V9=[1,41],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,29],$Vh=[1,28],$Vi=[1,30],$Vj=[1,31],$Vk=[1,32],$Vl=[1,33],$Vm=[2,5,12,14,15,20,33,34,35,36,37,43,46,49,52,53,54,55,57,61,63,64,67,68,70,71],$Vn=[1,58],$Vo=[1,70],$Vp=[1,71],$Vq=[1,55],$Vr=[1,54],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[1,56],$Vz=[1,57],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,63],$VF=[1,66],$VG=[1,67],$VH=[1,68],$VI=[1,69],$VJ=[1,76],$VK=[20,38,48,51],$VL=[20,38,48],$VM=[2,30],$VN=[2,32],$VO=[1,103],$VP=[1,101],$VQ=[1,94],$VR=[1,95],$VS=[1,96],$VT=[1,97],$VU=[1,98],$VV=[1,99],$VW=[1,100],$VX=[1,102],$VY=[1,104],$VZ=[1,105],$V_=[1,106],$V$=[1,107],$V01=[1,108],$V11=[1,109],$V21=[1,110],$V31=[13,39,43,44,47,48,51,62,73,74,75,76,77,82,83,84,85,86,87,88,89,97,99],$V41=[1,130],$V51=[1,131],$V61=[13,32,38,44],$V71=[13,39,43,44,51,62,87,88,89,97,99],$V81=[1,196],$V91=[43,44,51],$Va1=[13,39,43,44,47,48,51,62,73,74,83,84,85,86,87,88,89,97,99],$Vb1=[13,39,43,44,47,48,51,62,73,74,75,76,83,84,85,86,87,88,89,97,99],$Vc1=[13,39,43,44,47,48,51,62,73,74,75,76,77,83,84,85,86,87,88,89,97,99],$Vd1=[13,39,43,44,47,48,51,62,83,84,85,86,87,88,89,97,99],$Ve1=[1,241],$Vf1=[44,51],$Vg1=[1,279],$Vh1=[1,278],$Vi1=[43,61,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"impresion":8,"asignacion":9,"sent_if":10,"sent_while":11,"BREAK":12,"PYC":13,"CONTINUE":14,"RETURN":15,"e":16,"sent_switch":17,"sent_for":18,"sent_do_while":19,"ID":20,"DECRE":21,"INCRE":22,"funciones":23,"llamada":24,"startwith":25,"decl_vectores":26,"decl_list_din":27,"agregar_lista":28,"modi_lista":29,"tipo":30,"lista_ids":31,"IGUAL":32,"DOUBLE":33,"INT":34,"STRING":35,"CHAR":36,"BOOLEAN":37,"CORA":38,"CORC":39,"NEW":40,"LLAVA":41,"lista_valores":42,"LLAVC":43,"COMA":44,"modi_vector":45,"DYNAMICLIST":46,"MENORQUE":47,"MAYORQUE":48,"APPEND":49,"PARA":50,"PARC":51,"SETVALUE":52,"PRINTLN":53,"PRINT":54,"IF":55,"ELSE":56,"SWITCH":57,"list_case":58,"default":59,"caso":60,"CASE":61,"DOSPUNTOS":62,"WHILE":63,"FOR":64,"dec_asignacion_for":65,"actualizacion_for":66,"DEFAULT":67,"DO":68,"lista_parametros":69,"VOID":70,"START":71,"WITH":72,"MAS":73,"MENOS":74,"MULTI":75,"DIV":76,"POT":77,"SQRT":78,"SIN":79,"COS":80,"TAN":81,"MOD":82,"MAYORIGUAL":83,"MENORIGUAL":84,"IGUALIGUAL":85,"DIFERENTE":86,"AND":87,"ANDD":88,"OR":89,"NOT":90,"DECIMAL":91,"ENTERO":92,"CADENA":93,"CARACTER":94,"TRUE":95,"FALSE":96,"INTERROGACION":97,"GETVALUE":98,"PNT":99,"TOUPPER":100,"TOLOWER":101,"SUBSTR":102,"CARAOFPOS":103,"CARALENGHT":104,"TOINT":105,"TODOUBLE":106,"ROUND":107,"TYPEOF":108,"PARSE":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"BREAK",13:"PYC",14:"CONTINUE",15:"RETURN",20:"ID",21:"DECRE",22:"INCRE",32:"IGUAL",33:"DOUBLE",34:"INT",35:"STRING",36:"CHAR",37:"BOOLEAN",38:"CORA",39:"CORC",40:"NEW",41:"LLAVA",43:"LLAVC",44:"COMA",46:"DYNAMICLIST",47:"MENORQUE",48:"MAYORQUE",49:"APPEND",50:"PARA",51:"PARC",52:"SETVALUE",53:"PRINTLN",54:"PRINT",55:"IF",56:"ELSE",57:"SWITCH",61:"CASE",62:"DOSPUNTOS",63:"WHILE",64:"FOR",67:"DEFAULT",68:"DO",70:"VOID",71:"START",72:"WITH",73:"MAS",74:"MENOS",75:"MULTI",76:"DIV",77:"POT",78:"SQRT",79:"SIN",80:"COS",81:"TAN",82:"MOD",83:"MAYORIGUAL",84:"MENORIGUAL",85:"IGUALIGUAL",86:"DIFERENTE",87:"AND",88:"ANDD",89:"OR",90:"NOT",91:"DECIMAL",92:"ENTERO",93:"CADENA",94:"CARACTER",95:"TRUE",96:"FALSE",97:"INTERROGACION",98:"GETVALUE",99:"PNT",100:"TOUPPER",101:"TOLOWER",102:"SUBSTR",103:"CARAOFPOS",104:"CARALENGHT",105:"TOINT",106:"TODOUBLE",107:"ROUND",108:"TYPEOF",109:"PARSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,1],[6,1],[6,2],[6,3],[6,3],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[30,1],[30,1],[30,1],[30,1],[30,1],[26,11],[26,9],[26,7],[42,3],[42,1],[45,7],[27,12],[27,8],[28,7],[29,9],[31,3],[31,1],[8,5],[8,5],[9,4],[10,7],[10,11],[10,9],[17,7],[17,8],[17,7],[58,2],[58,1],[60,4],[11,7],[18,11],[65,4],[65,3],[59,3],[66,2],[66,2],[66,3],[19,8],[23,8],[23,7],[23,8],[23,7],[69,4],[69,2],[24,4],[24,3],[25,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,6],[16,4],[16,4],[16,4],[16,4],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,2],[16,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,5],[16,2],[16,2],[16,4],[16,4],[16,6],[16,1],[16,1],[16,5],[16,5],[16,8],[16,6],[16,5],[16,4],[16,4],[16,4],[16,4],[16,4],[16,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Ast($$[$0-1]); return this.$
break;
case 2: case 54:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 37: case 44: case 55:
this.$ = new Array(); this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 13: case 14: case 18: case 21:
this.$ = $$[$0];
break;
case 9:
this.$ = new Break();
break;
case 10:
this.$ = new Continue();
break;
case 11:
this.$ = new Retorno(null);
break;
case 12:
this.$ = new Retorno($$[$0-1]);
break;
case 15: case 19: case 20: case 97:
this.$ = $$[$0-1];
break;
case 16:
this.$ = new Asignacion($$[$0-2], new Aritmetica(new Aritmetica($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 17:
this.$ = new Asignacion($$[$0-2], new Aritmetica(new Aritmetica($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 25:
console.log("Error Sintactico "  + yytext
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);

                           new Errores("Sintactico", "No se esperaba el caracter "+
                                           this._$.first_line, this._$.first_column);
                           
break;
case 26:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column); 
break;
case 27:
this.$ = new Declaracion($$[$0-2],$$[$0-1],null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 28:
this.$ = new Tipo("DOBLE");
break;
case 29:
this.$ = new Tipo("ENTERO");
break;
case 30:
this.$ = new Tipo("CADENA");
break;
case 31:
this.$ = new Tipo("CARACTER");
break;
case 32:
this.$ = new Tipo("BOOLEAN");
break;
case 33:
this.$ = new DeclararcionVectores(1,$$[$0-10],$$[$0-9],$$[$0-2],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 34:
this.$ = new DeclararcionVectores(2,$$[$0-8],$$[$0-7],$$[$0-2],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 36: case 43:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 45:
this.$ = new Println($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 46:
this.$ = new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 47:
this.$ = new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 48:
this.$ = new Ifs($$[$0-4],$$[$0-1],[],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 49:
this.$ = new Ifs($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 50:
this.$ = new Ifs($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 51:
this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 52:
this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 53:
this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 56:
this.$ = new Caso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 57:
this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 58:
this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 59:
this.$ = new Declaracion($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 60:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 61:
this.$ = new Caso(null,$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 62:
this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 63:
this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 64:
this.$ = new Asignacion($$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 65:
this.$ = new DoWhile($$[$0-1],$$[$0-5],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 66:
this.$ = new Funcion(2, $$[$0-7], $$[$0-6], $$[$0-4], false, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 67:
this.$ = new Funcion(2, $$[$0-6], $$[$0-5], [], false, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 68:
this.$ = new Funcion(3, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 69:
this.$ = new Funcion(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 70:
this.$ = $$[$0-3]; this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 71:
this.$ = new Array(); this.$.push(new Simbolo(6, $$[$0-1], $$[$0], null));
break;
case 72:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column);
break;
case 73:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 74:
this.$ = new StartWith($$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 75:
this.$ = new Aritmetica($$[$0-2], '+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 76:
this.$ = new Aritmetica($$[$0-2], '-', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 77:
this.$ = new Aritmetica($$[$0-2], '*', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 78:
this.$ = new Aritmetica($$[$0-2], '/', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 79:
this.$ = new Aritmetica($$[$0-2], '^', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 80:
this.$ = new Aritmetica($$[$0-3], '^', $$[$0-1], _$[$0-5].first_line,_$[$0-5].last_column, false);
break;
case 81:
this.$ = new Aritmetica($$[$0-1], 'sqrt', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 82:
this.$ = new Aritmetica($$[$0-1], 'sin', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 83:
this.$ = new Aritmetica($$[$0-1], 'cos', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 84:
this.$ = new Aritmetica($$[$0-1], 'tan', $$[$0-1], _$[$0-3].first_line,_$[$0-3].last_column, false);
break;
case 85:
this.$ = new Aritmetica($$[$0-2], '%', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 86:
this.$ = new Relacional($$[$0-2], '>=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 87:
this.$ = new Relacional($$[$0-2], '>', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 88:
this.$ = new Relacional($$[$0-2], '<=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 89:
this.$ = new Relacional($$[$0-2], '<', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 90:
this.$ = new Relacional($$[$0-2], '==', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 91:
this.$ = new Relacional($$[$0-2], '!=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 92:
this.$ = new Logicas($$[$0-2],'&&', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 93:
this.$ = new Aritmetica($$[$0-2],'+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 94:
this.$ = new Logicas($$[$0-2],'||', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 95:
this.$ = new Logicas($$[$0],'!', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 96:
this.$ = new Aritmetica($$[$0], 'UNARIO', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 98:
this.$ = new Primitivo(Number($$[$0]),'DOBLE',_$[$0].first_line,_$[$0].last_column);
break;
case 99:
this.$ = new Primitivo(Number($$[$0]),'ENTERO',_$[$0].first_line,_$[$0].last_column);
break;
case 100:
this.$ = new Identificador($$[$0],_$[$0].first_line,_$[$0].last_column);
break;
case 101:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CADENA',_$[$0].first_line,_$[$0].last_column);
break;
case 102:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new Primitivo($$[$0],'CARACTER',_$[$0].first_line,_$[$0].last_column);
break;
case 103:
this.$ = new Primitivo(true,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 104:
this.$ = new Primitivo(false,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 105:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 106:
this.$ = new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false);
break;
case 107:
this.$ = new Aritmetica(new Identificador($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new Primitivo(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false);
break;
case 108:
this.$ = new Casteos($$[$0-2],$$[$0], _$[$0-3].first_line,_$[$0-3].last_column);
break;
case 109:
this.$ = new AccesoVector($$[$0-3], $$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 113:
this.$ = new Toupper($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 114:
this.$ = new Tolower($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 115:
this.$ = new  SubString($$[$0-7],$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 116:
this.$ = new  CharOfPosition($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 117:
this.$ = new LenghtC($$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 118:
this.$ = new ToInt($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 119:
this.$ = new ToDouble($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 120:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 121:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 122:
this.$ = new Tostring($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 123:
this.$ = new TipoParse($$[$0-1],"booleano",_$[$0-5].first_line,_$[$0-5].last_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{1:[3]},{2:$V0,5:[1,42],6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),{13:[1,44]},{13:[1,45]},{13:[1,46],16:47,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($Vm,[2,13]),o($Vm,[2,14]),{13:[1,72]},{21:[1,73],22:[1,74],32:[1,75],50:$VJ},o($Vm,[2,18]),{13:[1,77]},{13:[1,78]},o($Vm,[2,21]),o($Vm,[2,22]),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),{20:[1,80],31:79},{50:[1,81]},{50:[1,82]},{50:[1,83]},{50:[1,84]},{50:[1,85]},{50:[1,86]},{41:[1,87]},{20:[1,88]},{72:[1,89]},{47:[1,90]},{50:[1,91]},{50:[1,92]},o($VK,[2,28]),o($VK,[2,29]),o($VL,$VM),o($VK,[2,31]),o($VL,$VN),{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),{13:[1,93],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{50:[1,111]},{50:[1,112]},{50:[1,113]},{50:[1,114]},{50:[1,115]},{16:116,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:117,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:118,20:$Vn,24:64,25:65,30:119,33:$V5,34:$V6,35:[1,120],36:$V8,37:[1,121],50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($V31,[2,98]),o($V31,[2,99]),o($V31,[2,100],{21:[1,123],22:[1,122],38:[1,124],50:$VJ}),o($V31,[2,101]),o($V31,[2,102]),o($V31,[2,103]),o($V31,[2,104]),{50:[1,125]},o($V31,[2,111]),o($V31,[2,112]),{50:[1,126]},{50:[1,127]},{50:[1,128]},{50:[1,129]},{50:$V41},{99:$V51},o($Vm,[2,15]),{13:[1,132]},{13:[1,133]},{16:134,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:137,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,42:135,50:$Vq,51:[1,136],71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($Vm,[2,19]),o($Vm,[2,20]),{13:[1,139],32:[1,138],38:[1,140],44:[1,141]},o($V61,[2,44],{50:[1,142]}),{16:143,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:144,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:145,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:146,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:147,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{20:[1,150],30:149,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,65:148},{2:$V0,4:151,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{50:[1,152]},{20:[1,154],24:153},{30:155,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9},{16:156,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:157,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($Vm,[2,12]),{16:158,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:159,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:160,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:161,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:162,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:163,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:164,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:165,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:166,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:167,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:168,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:169,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:170,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:171,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:172,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:173,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{100:[1,174],101:[1,175],102:[1,176],103:[1,177],104:[1,178]},{16:179,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:180,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:181,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:182,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:183,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($V71,[2,95],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ}),o($V31,[2,96]),{47:$VO,48:$VP,51:[1,184],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{51:[1,185]},{50:$V41,51:$VM},{51:$VN,99:$V51},o($V31,[2,106]),o($V31,[2,107]),{16:186,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:187,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:188,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:189,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:190,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:191,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:192,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{109:[1,193]},o($Vm,[2,16]),o($Vm,[2,17]),{13:[1,194],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{44:$V81,51:[1,195]},o($V31,[2,73]),o($V91,[2,37],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21}),{16:197,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($Vm,[2,27]),{39:[1,198]},{20:[1,199]},{30:202,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,51:[1,201],69:200},{47:$VO,48:$VP,51:[1,203],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,204],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,205],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,206],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,207],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{13:[1,208]},{20:[1,209]},{32:[1,210]},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,211],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{30:202,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,51:[1,213],69:212},o($V31,[2,74]),{50:$VJ},{48:[1,214]},{44:[1,215],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{44:[1,216],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},o($Va1,[2,75],{75:$VS,76:$VT,77:$VU,82:$VV}),o($Va1,[2,76],{75:$VS,76:$VT,77:$VU,82:$VV}),o($Vb1,[2,77],{77:$VU,82:$VV}),o($Vb1,[2,78],{77:$VU,82:$VV}),o($Vc1,[2,79],{82:$VV}),o($Vc1,[2,85],{82:$VV}),o($Vd1,[2,86],{73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV}),o($Vd1,[2,87],{73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV}),o($Vd1,[2,88],{73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV}),o($Vd1,[2,89],{73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV}),o($Vd1,[2,90],{73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV}),o($Vd1,[2,91],{73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV}),o($V71,[2,92],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ}),o($V71,[2,93],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ}),o([13,39,43,44,51,62,89,97,99],[2,94],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$}),{47:$VO,48:$VP,62:[1,217],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{50:[1,218]},{50:[1,219]},{50:[1,220]},{50:[1,221]},{50:[1,222]},{44:[1,223],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,224],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,225],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,226],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,227],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},o($V31,[2,97]),{16:228,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{39:[1,229],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{44:[1,230],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,231],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,232],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,233],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,234],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,235],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{50:[1,236]},o($Vm,[2,47]),o($V31,[2,72]),{16:237,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{13:[1,238],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{32:[1,239]},o($V61,[2,43]),{44:$Ve1,51:[1,240]},{41:[1,242]},{20:[1,243]},{13:[1,244]},{13:[1,245]},{41:[1,246]},{41:[1,247]},{41:[1,248]},{16:249,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{32:[1,250]},{16:251,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{63:[1,252]},{44:$Ve1,51:[1,253]},{41:[1,254]},{20:[1,255]},{16:256,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:257,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:258,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{51:[1,259]},{51:[1,260]},{16:261,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:262,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{51:[1,263]},{16:264,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($V31,[2,81]),o($V31,[2,82]),o($V31,[2,83]),o($V31,[2,84]),o([13,39,43,44,51,62,97],[2,108],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,99:$V21}),o($V31,[2,109]),{16:265,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($V31,[2,118]),o($V31,[2,119]),o($V31,[2,120]),o($V31,[2,121]),o($V31,[2,122]),{16:266,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($V91,[2,36],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21}),o($Vm,[2,26]),{16:269,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,40:[1,267],41:[1,268],50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{41:[1,270]},{30:271,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9},{2:$V0,4:272,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},o($Vf1,[2,71]),o($Vm,[2,45]),o($Vm,[2,46]),{2:$V0,4:273,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{2:$V0,4:274,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{58:275,59:276,60:277,61:$Vg1,67:$Vh1},{13:[1,280],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{16:281,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{13:[2,60],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{50:[1,282]},{41:[1,283]},{2:$V0,4:284,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{32:[1,285]},{47:$VO,48:$VP,51:[1,286],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{44:[1,287],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},o([13,39,43,44,51,62],[2,105],{47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21}),o($V31,[2,113]),o($V31,[2,114]),{44:[1,288],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,289],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},o($V31,[2,117]),{47:$VO,48:$VP,51:[1,290],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,291],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,292],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{30:293,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9},{16:137,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,42:294,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{13:[1,295],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{2:$V0,4:296,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{20:[1,297]},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,298],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,299],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,300],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{43:[1,301],59:302,60:303,61:$Vg1,67:$Vh1},{43:[1,304]},o($Vi1,[2,55]),{62:[1,305]},{16:306,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{20:[1,308],66:307},{13:[2,59],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{16:309,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{2:$V0,4:310,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,311],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{16:313,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,40:[1,312],50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{13:[1,314]},{16:315,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{16:316,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},o($V31,[2,116]),o($V31,[2,80]),o($V31,[2,110]),o($V31,[2,123]),{38:[1,317]},{43:[1,318],44:$V81},o($Vm,[2,35]),{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,319],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},o($Vf1,[2,70]),o($Vm,[2,67]),o($Vm,[2,48],{56:[1,320]}),o($Vm,[2,57]),o($Vm,[2,51]),{43:[1,321]},o($Vi1,[2,54]),o($Vm,[2,53]),{2:$V0,4:322,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{47:$VO,48:$VP,62:[1,323],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{51:[1,324]},{21:[1,325],22:[1,326],32:[1,327]},{47:$VO,48:$VP,51:[1,328],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,329],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},o($Vm,[2,69]),{46:[1,330]},{13:[1,331],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},o($Vm,[2,41]),{47:$VO,48:$VP,51:[1,332],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{47:$VO,48:$VP,51:[1,333],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{16:334,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{13:[1,335]},o($Vm,[2,66]),{10:337,41:[1,336],55:$Vf},o($Vm,[2,52]),{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[2,61],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{2:$V0,4:338,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{41:[1,339]},{51:[2,62]},{51:[2,63]},{16:340,20:$Vn,24:64,25:65,35:$Vo,37:$Vp,50:$Vq,71:$Vl,74:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,98:$VE,105:$VF,106:$VG,107:$VH,108:$VI},{13:[2,65]},o($Vm,[2,68]),{47:[1,341]},o($Vm,[2,40]),{13:[1,342]},o($V31,[2,115]),{39:[1,343],47:$VO,48:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},o($Vm,[2,34]),{2:$V0,4:344,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},o($Vm,[2,50]),o($Vi1,[2,56],{7:4,8:5,9:6,10:7,11:8,17:12,18:13,19:14,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,6:43,2:$V0,12:$V1,14:$V2,15:$V3,20:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl}),{2:$V0,4:345,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{47:$VO,48:$VP,51:[2,64],73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,97:$V11,99:$V21},{30:346,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9},o($Vm,[2,42]),{13:[1,347]},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,348],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{2:$V0,6:43,7:4,8:5,9:6,10:7,11:8,12:$V1,14:$V2,15:$V3,17:12,18:13,19:14,20:$V4,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:24,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,43:[1,349],46:$Va,49:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,57:$Vg,63:$Vh,64:$Vi,68:$Vj,70:$Vk,71:$Vl},{48:[1,350]},o($Vm,[2,33]),o($Vm,[2,49]),o($Vm,[2,58]),{13:[1,351]},o($Vm,[2,39])],
defaultActions: {42:[2,1],325:[2,62],326:[2,63],328:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    
       
        const {Aritmetica} = require('../Expresiones/Operaciones/Aritmetica');
        const {Primitivo} = require('../Expresiones/Primitivo');
        const {Relacional} = require('../Expresiones/Operaciones/Relacionales')
        const {Logicas} = require('../Expresiones/Operaciones/Logicas')
        const {Println} = require('../Instrucciones/Println');
        const {Print} = require('../Instrucciones/Print');
        const {Tolower} = require('../Instrucciones/Tolower');
        const {Toupper} = require('../Instrucciones/Toupper');
        const {ToInt} = require('../Instrucciones/FuncionesNativas/ToInt');
        const {ToDouble} = require('../Instrucciones/FuncionesNativas/ToDouble');
        const {Round} = require('../Instrucciones/FuncionesNativas/Round');
        const {Typeof} = require('../Instrucciones/FuncionesNativas/Typeof');
        const {Tostring} = require('../Instrucciones/FuncionesNativas/Tostring');
        const {SubString} = require('../Instrucciones/SubString')
        const {TipoParse} = require('../Instrucciones/FuncionesNativas/TipoParse')
        const {CharOfPosition} = require('../Instrucciones/CharOfPosition')
        const {LenghtC} = require('../Instrucciones/LenghtC')
        const {Casteos} = require('../Instrucciones/FuncionesNativas/Casteos');
        const {Declaracion} = require('../Instrucciones/Declaracion');
        const {DeclararcionVectores} = require('../Instrucciones/DeclaracionVectores');
        const {AccesoVector} = require('../Expresiones/AccesoVector');
        const {Asignacion} = require('../Instrucciones/Asignacion');
        const {Ifs} = require('../Instrucciones/SentenciasdeControl/Ifs');
        const {While }= require('../Instrucciones/SentenciasCiclicas/While');
        const {DoWhile}= require('../Instrucciones/SentenciasCiclicas/DoWhile');
        const {Ast} = require('../AST/Ast');
        const {Errores} = require('../AST/Errores');
        const {Tipo} = require('../TablaSimbolos/Tipo');
        const {Simbolo} = require('../TablaSimbolos/Simbolo');
        const {Identificador} = require('../Expresiones/identificador');
        const {Ternario} = require('../Expresiones/Ternario');
        const {Break} = require('../Instrucciones/SentenciadeTransferencia/Break');
        const {Retorno} = require('../Instrucciones/SentenciadeTransferencia/Return');
        const {Continue} = require('../Instrucciones/SentenciadeTransferencia/Continue');
        const {Switch} = require('../Instrucciones/SentenciasdeControl/Switch');
        const {Caso} = require('../Instrucciones/SentenciasdeControl/caso');
        const {For} = require('../Instrucciones/SentenciasCiclicas/For');
        const {Funcion} = require('../Instrucciones/Funcion');
        const {Llamada} = require('../Instrucciones/Llamada');
        const {StartWith} = require('../Instrucciones/StartWith');







/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoramos los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lineas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 22 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 21 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 50 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 51 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 99 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 13 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 97 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 47 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 48 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 'EVALUAR'
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 95
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 96
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 34
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 33
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 36
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 37
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 70
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 53
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 54
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 101
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 100
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 105
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 106
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 107
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 108
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 'TOSTRING'
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 102
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 103
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 104
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 109
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 56
break;
case 62:console.log("Reconocio: "+yy_.yytext); return 63
break;
case 63:console.log("Reconocio: "+yy_.yytext); return 12
break;
case 64:console.log("Reconocio: "+yy_.yytext); return 57
break;
case 65:console.log("Reconocio: "+yy_.yytext); return 61
break;
case 66:console.log("Reconocio: "+yy_.yytext); return 68
break;
case 67:console.log("Reconocio: "+yy_.yytext); return 67
break;
case 68:console.log("Reconocio: "+yy_.yytext); return 64
break;
case 69:console.log("Reconocio: "+yy_.yytext); return 46
break;
case 70:console.log("Reconocio: "+yy_.yytext); return 40
break;
case 71:console.log("Reconocio: "+yy_.yytext); return 49
break;
case 72:console.log("Reconocio: "+yy_.yytext); return 52
break;
case 73:console.log("Reconocio: "+yy_.yytext); return 98
break;
case 74:console.log("Reconocio: "+yy_.yytext); return 14
break;
case 75:console.log("Reconocio: "+yy_.yytext); return 15
break;
case 76:console.log("Reconocio: "+yy_.yytext); return 71
break;
case 77:console.log("Reconocio: "+yy_.yytext); return 72
break;
case 78:console.log("Reconocio: "+yy_.yytext); return 91
break;
case 79:console.log("Reconocio: "+yy_.yytext); return 92
break;
case 80:console.log("Reconocio: "+yy_.yytext); return 20
break;
case 81:console.log("Reconocio: "+yy_.yytext); return 93
break;
case 82:console.log("Reconocio: "+yy_.yytext); return 94
break;
case 83:/*Espacios se ignoran */ 
break;
case 84:return 5
break;
case 85:console.log("Error Lexico " + yy_.yytext
                        + "linea "+ yy_.yylineno
                        + "columna " +(yy_.yylloc.last_column+1));

                        new Errores('Lexico','El caracter '+ yy_.yytext
                                + ' no forma parte del lenguaje',
                                yy_.yylineno+1,
                                yy_.yylloc.last_column+1);
                        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:pow\b)/i,/^(?:!)/i,/^(?:%)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:&)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:tolowercase\b)/i,/^(?:touppercase\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:subString\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:length\b)/i,/^(?:parse\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:do\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:dynamiclist\b)/i,/^(?:new\b)/i,/^(?:append\b)/i,/^(?:setvalue\b)/i,/^(?:getvalue\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\nrt]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\nrt]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}